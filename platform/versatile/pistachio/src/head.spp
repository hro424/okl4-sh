/*
 * Copyright (c) 2003-2006, National ICT Australia (NICTA)
 */
/*
 * Copyright (c) 2007 Open Kernel Labs, Inc. (Copyright Holder).
 * All rights reserved.
 *
 * 1. Redistribution and use of OKL4 (Software) in source and binary
 * forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *     (a) Redistributions of source code must retain this clause 1
 *         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
 *         (Licence Terms) and the above copyright notice.
 *
 *     (b) Redistributions in binary form must reproduce the above
 *         copyright notice and the Licence Terms in the documentation and/or
 *         other materials provided with the distribution.
 *
 *     (c) Redistributions in any form must be accompanied by information on
 *         how to obtain complete source code for:
 *        (i) the Software; and
 *        (ii) all accompanying software that uses (or is intended to
 *        use) the Software whether directly or indirectly.  Such source
 *        code must:
 *        (iii) either be included in the distribution or be available
 *        for no more than the cost of distribution plus a nominal fee;
 *        and
 *        (iv) be licensed by each relevant holder of copyright under
 *        either the Licence Terms (with an appropriate copyright notice)
 *        or the terms of a licence which is approved by the Open Source
 *        Initative.  For an executable file, "complete source code"
 *        means the source code for all modules it contains and includes
 *        associated build and other files reasonably required to produce
 *        the executable.
 *
 * 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
 * LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
 * IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
 * EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
 * THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
 * PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
 * THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
 * BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
 * THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
 * PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
 * PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
 * THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
 *
 * 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Description:    The kernels entry point
 */

#include <kernel/arch/asm.h>
#include <soc/interface.h>

/*
 * The following defines were originally in core kernel code.  They are
 * repeated here as SoC code should really handle its own definitions of this
 * info.
 */
#define CP15             p15
#define C15_control      c1
#define C15_CONTROL_INIT 0x0078

/* This is the entry point of the NICTA::Pistachio ARM architecture.
 * The boot loader must call _start with the processor in privileged
 * mode and translation disabled.
 */
#if defined(__GNUC__)
        .section .init.head
#elif defined(__RVCT_GNU__)
        PRESERVE8
        AREA    |.init.head|, CODE
        IMPORT  kernel_arch_init
        ENTRY
#endif
        EXPORT  __phys_addr_stack

        BEGIN_PROC(_start)

        /* Setup status register for supervisor mode, interrupts disabled */
        msr     cpsr_fc, #0xd3

        /* Setup the CP15 control register to a known initial state */
        ldr     r0,     =C15_CONTROL_INIT
        mcr     CP15, 0, r0, C15_control, c0

        /* Flush D-Cache */
LABEL(L0)
        mrc     p15, 0, r15, c7, c14, 3
        bne     L0

        /* Drain write buffer. */
        mov    r0, #0
        mcr     p15, 0, r0, c7, c10, 4

        /* Flush I-Cache */
        mov    r0, #0
        mcr     p15, 0, r0, c7, c5, 0

        /* flush I+D TLB */
        mov    r0, #0
        mcr     p15, 0, r0, c8, c7, 0

        /* Setup boot stack (physical address) */
        ldr     sp,     __phys_addr_stack
        add     sp,     sp,     #STACK_TOP

        /* Jump to startup_system */
        bl      kernel_arch_init

        /* NOT REACHED */
LABEL(L1)
        b       L1

        /* These need to be filled in by the build system */
LABEL(__phys_addr_stack)
        DCDU    0x0

        END
