#####################################################################
# Copyright (c) 2008 Open Kernel Labs, Inc. (Copyright Holder).
# All rights reserved.
# 
# 1. Redistribution and use of OKL4 (Software) in source and binary
# forms, with or without modification, are permitted provided that the
# following conditions are met:
# 
#     (a) Redistributions of source code must retain this clause 1
#         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
#         (Licence Terms) and the above copyright notice.
# 
#     (b) Redistributions in binary form must reproduce the above
#         copyright notice and the Licence Terms in the documentation and/or
#         other materials provided with the distribution.
# 
#     (c) Redistributions in any form must be accompanied by information on
#         how to obtain complete source code for:
#        (i) the Software; and
#        (ii) all accompanying software that uses (or is intended to
#        use) the Software whether directly or indirectly.  Such source
#        code must:
#        (iii) either be included in the distribution or be available
#        for no more than the cost of distribution plus a nominal fee;
#        and
#        (iv) be licensed by each relevant holder of copyright under
#        either the Licence Terms (with an appropriate copyright notice)
#        or the terms of a licence which is approved by the Open Source
#        Initative.  For an executable file, "complete source code"
#        means the source code for all modules it contains and includes
#        associated build and other files reasonably required to produce
#        the executable.
# 
# 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
# LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
# IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
# EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
# THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
# BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
# PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
# THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
# 
# 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#####################################################################

Import('*')

############################################################################
## Memory Pools
#############################################################################

machine=build.machine

elfweaver_env = build.KengeEnvironment("images")
elfweaver_env.process_global_config()
pools = args['pools']
cells = args['cells']

apps = args['kernel'].apps + pools
for c in cells:
    apps.extend(c.apps)


#############################################################################
## Build Bootimage
#############################################################################

if( machine.platform == "pc99" ):

    apps = elfweaver_env.LayoutVirtual(apps)
    spec = elfweaver_env.GenWeaverXML(build.dom, apps)
    elf_image, sim_image, boot_image = elfweaver_env.CreateImages(spec, apps)
    boot_image = elfweaver_env.CreateFatImage([elf_image])

    build.TestImage(boot_image)
    build.RunImage(boot_image)
    Default(boot_image)

elif( getattr( machine, "macho", False) ):
    # We will have kernel other binaries
    apps = args['apps']

    # Relocate the user-apps to fit
    apps = build.MachoLayoutVirtual( apps )

    # We need a boot image of the apps
    boot_image = build.CreateLegionImage( apps )

    # Set up
    build.TestImage(boot_image)
    build.RunImage(boot_image)

    # Building without weaver
    Default( boot_image )

else:
    # Standard 'weaver' building
    apps = elfweaver_env.LayoutVirtual(apps)
    spec = elfweaver_env.GenWeaverXML(build.dom, apps)
    elf_image, sim_image, boot_image = elfweaver_env.CreateImages(spec, apps)
    run_method = get_arg(build, 'RUN', None)
    if (machine.__name__ == 'gumstix' and run_method == "hardware") or\
        machine.__name__ == 'gta01' or machine.__name__ == 'gta01_xip':
        build.TestImage(boot_image)
        build.RunImage(boot_image)
        Default(boot_image)
    elif machine.__name__ in ["versatile", "versatile_uboot"]:
        build.TestImage(boot_image)
        build.RunImage(boot_image)
        Default(boot_image)
    elif machine.__name__ == "kzm_arm11":
        if (run_method == "hardware"):
            build.expect_test_data = [('KZM_ARM11 #', 'cfsetenv bootfile regression/kzm_arm11'),
                                      ('KZM_ARM11 #', 'dhcp'), ('KZM_ARM11 #', 'go 0x80000000')] + build.expect_test_data
        build.TestImage(boot_image)
        build.RunImage(boot_image)
        Default(boot_image)
    else:
        build.TestImage(sim_image)
        build.RunImage(sim_image)
        build.CoverageImage(sim_image)
        Default(elf_image, sim_image, boot_image)
if machine.__name__ == 'gta01' or machine.__name__ == 'gta01_xip':
    build.expect_test_data = [('GTA01Bv4 #', 'bootelf 0x31000000')] + build.expect_test_data

