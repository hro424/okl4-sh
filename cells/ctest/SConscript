#
# Copyright (c) 2008 Open Kernel Labs, Inc. (Copyright Holder).
# All rights reserved.
# 
# 1. Redistribution and use of OKL4 (Software) in source and binary
# forms, with or without modification, are permitted provided that the
# following conditions are met:
# 
#     (a) Redistributions of source code must retain this clause 1
#         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
#         (Licence Terms) and the above copyright notice.
# 
#     (b) Redistributions in binary form must reproduce the above
#         copyright notice and the Licence Terms in the documentation and/or
#         other materials provided with the distribution.
# 
#     (c) Redistributions in any form must be accompanied by information on
#         how to obtain complete source code for:
#        (i) the Software; and
#        (ii) all accompanying software that uses (or is intended to
#        use) the Software whether directly or indirectly.  Such source
#        code must:
#        (iii) either be included in the distribution or be available
#        for no more than the cost of distribution plus a nominal fee;
#        and
#        (iv) be licensed by each relevant holder of copyright under
#        either the Licence Terms (with an appropriate copyright notice)
#        or the terms of a licence which is approved by the Open Source
#        Initative.  For an executable file, "complete source code"
#        means the source code for all modules it contains and includes
#        associated build and other files reasonably required to produce
#        the executable.
# 
# 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
# LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
# IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
# EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
# THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
# BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
# PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
# THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
# 
# 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from kenge import OKL4Cell
from opts import get_option_arg

Import("*")

#############################################################################
## Build ctest
#############################################################################
ctest_env = build.KengeCell(OKL4Cell, args.get("name", "okl4"))

ctest_env.process_global_config()

# Get serial device details
serial_driver = None
timer_driver = None
try:
    for (driver, server, _, _) in ctest_env.machine.v2_drivers:
        if server == "vserial":
            serial_driver = driver
        if server == "vtimer":
            timer_driver = driver
except:
    # This may occur if the given machine has no "v2_drivers" property.
    pass


# Include generic libraries
ctest_env.Package("libs/compat")
if ctest_env.toolchain.type == "gnu":
    ctest_env.Package("libs/gcc")
if ctest_env.toolchain.type == "rvct":
    if serial_driver:
        ctest_env.Package("libs/rvct", buildname="c", serial_driver=serial_driver)
    else:
        ctest_env.Package("libs/rvct", buildname="c")
elif serial_driver:
    ctest_env.Package("libs/c", serial_driver=serial_driver)
else:
    ctest_env.Package("libs/c")

# Include kernel-specific libraries.
if ctest_env.kernel == "micro":
    ctest_env.Package("libs/l4")
    ctest_env.Package("libs/l4e")
elif ctest_env.kernel == "nano":
    ctest_env.Package("libs/nano")
else:
    raise UserError, "Unknown kernel"

# Include other libraries
ctest_env.Package("libs/check")
ctest_env.Package("libs/atomic_ops")
ctest_env.Package("libs/okl4")

# Make libc threadsafe.
if ctest_env.kernel == "micro":
    ctest_env.Package("libs/mutex")
ctest_env.Append(CPPDEFINES=["THREAD_SAFE"])

# Add libraries for serial
if serial_driver != None or timer_driver != None:
    ctest_env.Package("libs/queue")
    ctest_env.Package("libs/util")
    ctest_env.Package("libs/driverv2")
if serial_driver != None:
    ctest_env.Package("drivers/%s" % serial_driver)
    ctest_env.Package("libs/serial", serial_driver=serial_driver)
    ctest_env.add_use_device(None, ["serial_dev"])
if timer_driver != None:
    ctest_env.Package("drivers/%s" % timer_driver)
    ctest_env.add_use_device(None, ["timer_dev"])

# Build the package
ctest_env.Package("ctest", serial_driver=serial_driver, timer_driver=timer_driver)

#
# Running ctest using this configuration passes one command line argument
# to main(), a 7-chararcter string "ctest!\0".  The fact that this is
# 7 characters long is deliberate; forcing Elfweaver to pad this string
# with 1 char at the end.
#
# We test other padding cases (0, 2 or 3 chars) using Elfweaver unit tests
# test_merge.py.  We also test argc = 0 that way for now.
#
num_spaces = 256
if ctest_env.kernel == "nano":
    num_spaces = 1
ctest_env.set_cell_config(spaces = num_spaces, clists = 256, mutexes = 256,
                          args = ["ctest!"])
#ctest_env.set_cell_config(spaces = 64, clists = 256, mutexes = 256)
build.expect_test_data = [
                            (["argc    = 1",
                              "argv[0] = ctest!"], None),
                            (["100%: Checks: \d+, Failures: 0, Errors: 0",
                              "\d+%: Checks: \d+, Failures: \d+, Errors: \d+",
                              "--- KD# .* ---"], None)
                         ] + build.expect_test_data

build.SetCoveragePackages("ctest")

Return("ctest_env")

