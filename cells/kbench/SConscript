#
# Copyright (c) 2008 Open Kernel Labs, Inc. (Copyright Holder).
# All rights reserved.
# 
# 1. Redistribution and use of OKL4 (Software) in source and binary
# forms, with or without modification, are permitted provided that the
# following conditions are met:
# 
#     (a) Redistributions of source code must retain this clause 1
#         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
#         (Licence Terms) and the above copyright notice.
# 
#     (b) Redistributions in binary form must reproduce the above
#         copyright notice and the Licence Terms in the documentation and/or
#         other materials provided with the distribution.
# 
#     (c) Redistributions in any form must be accompanied by information on
#         how to obtain complete source code for:
#        (i) the Software; and
#        (ii) all accompanying software that uses (or is intended to
#        use) the Software whether directly or indirectly.  Such source
#        code must:
#        (iii) either be included in the distribution or be available
#        for no more than the cost of distribution plus a nominal fee;
#        and
#        (iv) be licensed by each relevant holder of copyright under
#        either the Licence Terms (with an appropriate copyright notice)
#        or the terms of a licence which is approved by the Open Source
#        Initative.  For an executable file, "complete source code"
#        means the source code for all modules it contains and includes
#        associated build and other files reasonably required to produce
#        the executable.
# 
# 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
# LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
# IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
# EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
# THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
# BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
# PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
# THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
# 
# 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from kenge import OKL4Cell

Import("*")

#############################################################################
## Build kbench
#############################################################################
kbench_env = build.KengeCell(OKL4Cell, args.get('name', 'okl4'))

# Get serial device details
serial_driver = None
for (driver, server, _, _) in kbench_env.machine.v2_drivers:
    if server == "vserial":
        serial_driver = driver
        break

kbench_env.process_global_config()
kbench_env.assign_irqs(None, kbench_env.machine.pmu_irq)

kbench_env.Package("libs/compat")
if kbench_env.toolchain.type == "gnu":
    kbench_env.Package("libs/gcc")
if kbench_env.toolchain.type == "rvct":
    if serial_driver:
        kbench_env.Package("libs/rvct", buildname="c", serial_driver=serial_driver)
    else:
        kbench_env.Package("libs/rvct", buildname="c")
elif serial_driver:
    kbench_env.Package("libs/c", serial_driver=serial_driver)
else:
    kbench_env.Package("libs/c")

kbench_env.Package("libs/l4")
kbench_env.Package("libs/l4e")

kbench_env.Package("libs/cycles")
kbench_env.Package("libs/bench")
kbench_env.Package("libs/mutex")
kbench_env.Package("libs/atomic_ops")
kbench_env.Package("libs/okl4")

# Add libraries for serial
if serial_driver:
    kbench_env.Package("libs/queue")
    kbench_env.Package("libs/util")
    kbench_env.Package("libs/driverv2")
    kbench_env.Package("drivers/%s" % serial_driver)
    kbench_env.Package("libs/serial", serial_driver=serial_driver)
    kbench_env.add_use_device(None, ["serial_dev"])

kbench = kbench_env.Package("kbench", serial_driver=serial_driver)
build.expect_test_data = kbench_env.expect_test_data

kbench_env.set_cell_config(spaces = 256, clists = 256, mutexes = 256, caps=2048)

# Ktest segment
ktest_segment = kbench_env.Memsection("ktest_segment", size = 0x2800000,
                                       mem_type = "unmapped", attach="rwx")
kbench_env.add_memsections(None, [ktest_segment])


Return("kbench_env")
