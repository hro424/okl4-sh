#####################################################################
# Copyright (c) 2008 Open Kernel Labs, Inc. (Copyright Holder).
# All rights reserved.
# 
# 1. Redistribution and use of OKL4 (Software) in source and binary
# forms, with or without modification, are permitted provided that the
# following conditions are met:
# 
#     (a) Redistributions of source code must retain this clause 1
#         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
#         (Licence Terms) and the above copyright notice.
# 
#     (b) Redistributions in binary form must reproduce the above
#         copyright notice and the Licence Terms in the documentation and/or
#         other materials provided with the distribution.
# 
#     (c) Redistributions in any form must be accompanied by information on
#         how to obtain complete source code for:
#        (i) the Software; and
#        (ii) all accompanying software that uses (or is intended to
#        use) the Software whether directly or indirectly.  Such source
#        code must:
#        (iii) either be included in the distribution or be available
#        for no more than the cost of distribution plus a nominal fee;
#        and
#        (iv) be licensed by each relevant holder of copyright under
#        either the Licence Terms (with an appropriate copyright notice)
#        or the terms of a licence which is approved by the Open Source
#        Initative.  For an executable file, "complete source code"
#        means the source code for all modules it contains and includes
#        associated build and other files reasonably required to produce
#        the executable.
# 
# 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
# LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
# IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
# EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
# THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
# BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
# PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
# THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
# 
# 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#####################################################################

from kenge import OKL4Cell

Import('*')

#############################################################################
## Build ktest
#############################################################################
rootserver_env = build.KengeCell(OKL4Cell, args.get('name', 'okl4'))

rootserver_env.process_global_config()
#rootserver_env.assign_irqs(None, [1, 3, 28])

# Get device details
serial_driver = None
timer_driver = None
if rootserver_env.machine.device_core is not None:
    for (driver, server, memory, interrupt) in rootserver_env.machine.v2_drivers:
        if server == "vserial":
            serial_driver = driver
        if server == "vtimer":
            timer_driver = driver



rootserver_env.Package("libs/compat")
if rootserver_env.toolchain.type == "gnu":
    rootserver_env.Package("libs/gcc")
if rootserver_env.toolchain.type == "rvct":
    if serial_driver:
        rootserver_env.Package("libs/rvct", buildname="c", serial_driver=serial_driver)
    else:
        rootserver_env.Package("libs/rvct", buildname="c")
else:
    rootserver_env.Package("libs/c", serial_driver=serial_driver)

rootserver_env.Package("libs/l4")
rootserver_env.Package("libs/l4e")

rootserver_env.Package("libs/check")
rootserver_env.Package("libs/ktest")
rootserver_env.Package("libs/mutex")
rootserver_env.Package("libs/atomic_ops")
rootserver_env.Package("libs/okl4")
rootserver_env.Package("libs/queue")
rootserver_env.Package("libs/util")
rootserver_env.Package("libs/driverv2")

if serial_driver:
    rootserver_env.Package("drivers/%s" % serial_driver)
    rootserver_env.Package("libs/serial", serial_driver=serial_driver)
    rootserver_env.add_use_device(None, ["serial_dev"])

    # Test device depends on v2 drivers
    rootserver_env.add_use_device(None, ["test_dev"])

if timer_driver:
    rootserver_env.Package("drivers/%s" % timer_driver)
    rootserver_env.add_use_device(None, ["timer_dev"])

ktest = rootserver_env.Package("ktest", serial_driver=serial_driver, timer_driver=timer_driver)

rootserver_env.Append(CPPDEFINES=["THREAD_SAFE"])
expect_test_data = [(["100%: Checks: \d+, Failures: 0, Errors: 0",
                           "\d+%: Checks: \d+, Failures: \d+, Errors: \d+"],
                          None)]
if get_bool_arg(rootserver_env.args, "ENABLE_DEBUG", True):
    build.expect_test_data += [('CKBR0100', '\033'), ('KDB_CKBR#', '0x01B')] + expect_test_data
else:
    build.expect_test_data += [('CKBR0100', '\033')] + expect_test_data


rootserver_env.set_cell_config(physpool=args.get('physpool', None), spaces=240,
                               clists=256, mutexes=256, threads=256,
                               plat_control=True)
#rootserver_env.set_cell_config()

# Ktest segment
ktest_segment = rootserver_env.Memsection("ktest_segment", size = 0x400000,
                                       mem_type = "unmapped", attach="rwx")
rootserver_env.add_memsections(None, [ktest_segment])


if rootserver_env.machine.__name__ == "kzm_arm11":
    uncached_addressing = rootserver_env.Addressing(cache_policy = "uncached")
    outer_cache_test_uncached_segment = rootserver_env.Memsection("outer_cache_test_uncached_segment", size = 0x1000, mem_type = "default", attach="rwx", addressing = uncached_addressing)
    rootserver_env.add_memsections(None, [outer_cache_test_uncached_segment])
    outer_cache_test_virt_segment = rootserver_env.Memsection("outer_cache_test_virt_segment", size = 0x1000, mem_type = "virtual", attach="rwx")
    rootserver_env.add_memsections(None, [outer_cache_test_virt_segment])
    rootserver_env.env_append(None, "outer_cache_test_uncached_physical", cap="outer_cache_test_uncached_segment/physical")
build.SetCoveragePackages("ktest")

Return("rootserver_env")
