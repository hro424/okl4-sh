#ifndef INC_STDCTokenTypes_hpp_
#define INC_STDCTokenTypes_hpp_

/* $ANTLR 2.7.6 (20060903): "CPP_parser_cpp.g" -> "STDCTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API STDCTokenTypes {
#endif
	enum {
		EOF_ = 1,
		LITERAL_template = 4,
		LESSTHAN = 5,
		GREATERTHAN = 6,
		LITERAL_typedef = 7,
		LITERAL_enum = 8,
		ID = 9,
		LCURLY = 10,
		SEMICOLON = 11,
		LITERAL_inline = 12,
		LITERAL_namespace = 13,
		RCURLY = 14,
		ASSIGNEQUAL = 15,
		COLON = 16,
		LITERAL_extern = 17,
		StringLiteral = 18,
		COMMA = 19,
		LITERAL___extension__ = 20,
		LITERAL__inline = 21,
		LITERAL___inline = 22,
		LITERAL___inline__ = 23,
		LITERAL_virtual = 24,
		LITERAL_explicit = 25,
		LITERAL_friend = 26,
		LITERAL__stdcall = 27,
		LITERAL___stdcall = 28,
		LITERAL_typename = 29,
		LITERAL___attribute__ = 30,
		LPAREN = 31,
		RPAREN = 32,
		LITERAL___mode__ = 33,
		LITERAL_const = 34,
		LITERAL___const = 35,
		LITERAL___noreturn__ = 36,
		LITERAL___returns_twice__ = 37,
		LITERAL___noinline__ = 38,
		LITERAL___always_inline__ = 39,
		LITERAL___flatten__ = 40,
		LITERAL___pure__ = 41,
		LITERAL___const__ = 42,
		LITERAL___nothrow__ = 43,
		LITERAL___sentinel__ = 44,
		LITERAL___format__ = 45,
		LITERAL___format_arg__ = 46,
		LITERAL___no_instrument_function__ = 47,
		LITERAL___section__ = 48,
		LITERAL___constructor__ = 49,
		LITERAL___destructor__ = 50,
		LITERAL___used__ = 51,
		LITERAL___unused__ = 52,
		LITERAL___deprecated__ = 53,
		LITERAL___weak__ = 54,
		LITERAL___malloc__ = 55,
		LITERAL___alias__ = 56,
		LITERAL___warn_unused_result__ = 57,
		LITERAL___nonnull__ = 58,
		LITERAL___externally_visible__ = 59,
		LITERAL_auto = 60,
		LITERAL_register = 61,
		LITERAL_static = 62,
		LITERAL_mutable = 63,
		LITERAL_const_cast = 64,
		LITERAL_volatile = 65,
		LITERAL___volatile = 66,
		LITERAL___restrict = 67,
		LITERAL___restrict__ = 68,
		LITERAL_char = 69,
		LITERAL_bool = 70,
		LITERAL_short = 71,
		LITERAL_int = 72,
		// "_int64" = 73
		// "__int64" = 74
		// "__w64" = 75
		LITERAL_long = 76,
		LITERAL_signed = 77,
		LITERAL___signed = 78,
		LITERAL___signed__ = 79,
		LITERAL_unsigned = 80,
		LITERAL_float = 81,
		LITERAL_double = 82,
		LITERAL_void = 83,
		LITERAL__declspec = 84,
		LITERAL___declspec = 85,
		LITERAL___builtin_va_list = 86,
		LITERAL_class = 87,
		LITERAL_struct = 88,
		LITERAL_union = 89,
		OPERATOR = 90,
		LITERAL_this = 91,
		LITERAL_true = 92,
		LITERAL_false = 93,
		DOT = 94,
		EQUALS = 95,
		LITERAL_public = 96,
		LITERAL_protected = 97,
		LITERAL_private = 98,
		OCTALINT = 99,
		STAR = 100,
		AMPERSAND = 101,
		LSQUARE = 102,
		RSQUARE = 103,
		TILDE = 104,
		LITERAL_asm = 105,
		LITERAL___asm = 106,
		LITERAL___asm__ = 107,
		ELLIPSIS = 108,
		LITERAL_throw = 109,
		LITERAL_case = 110,
		LITERAL_default = 111,
		LITERAL_if = 112,
		LITERAL_else = 113,
		LITERAL_switch = 114,
		LITERAL_while = 115,
		LITERAL_do = 116,
		LITERAL_for = 117,
		LITERAL_goto = 118,
		LITERAL_continue = 119,
		LITERAL_break = 120,
		LITERAL_return = 121,
		LITERAL_try = 122,
		LITERAL_catch = 123,
		LITERAL_using = 124,
		LITERAL__asm = 125,
		LITERAL___volatile__ = 126,
		SCOPE = 127,
		TIMESEQUAL = 128,
		DIVIDEEQUAL = 129,
		MINUSEQUAL = 130,
		PLUSEQUAL = 131,
		MODEQUAL = 132,
		SHIFTLEFTEQUAL = 133,
		SHIFTRIGHTEQUAL = 134,
		BITWISEANDEQUAL = 135,
		BITWISEXOREQUAL = 136,
		BITWISEOREQUAL = 137,
		QUESTIONMARK = 138,
		OR = 139,
		AND = 140,
		BITWISEOR = 141,
		BITWISEXOR = 142,
		NOTEQUAL = 143,
		EQUAL = 144,
		LESSTHANOREQUALTO = 145,
		GREATERTHANOREQUALTO = 146,
		SHIFTLEFT = 147,
		SHIFTRIGHT = 148,
		PLUS = 149,
		MINUS = 150,
		DIVIDE = 151,
		MOD = 152,
		DOTMBR = 153,
		POINTERTOMBR = 154,
		PLUSPLUS = 155,
		MINUSMINUS = 156,
		LITERAL_sizeof = 157,
		POINTERTO = 158,
		LITERAL_dynamic_cast = 159,
		LITERAL_static_cast = 160,
		LITERAL_reinterpret_cast = 161,
		NOT = 162,
		LITERAL_new = 163,
		LITERAL__cdecl = 164,
		LITERAL___cdecl = 165,
		LITERAL__near = 166,
		LITERAL___near = 167,
		LITERAL__far = 168,
		LITERAL___far = 169,
		LITERAL___interrupt = 170,
		LITERAL_pascal = 171,
		LITERAL__pascal = 172,
		LITERAL___pascal = 173,
		LITERAL_delete = 174,
		DECIMALINT = 175,
		HEXADECIMALINT = 176,
		CharLiteral = 177,
		FLOATONE = 178,
		FLOATTWO = 179,
		Whitespace = 180,
		Comment = 181,
		CPPComment = 182,
		PREPROC_DIRECTIVE = 183,
		ALL_TO_NL = 184,
		LineDirective = 185,
		Space = 186,
		Pragma = 187,
		Error = 188,
		EndOfLine = 189,
		Escape = 190,
		Digit = 191,
		Decimal = 192,
		LongSuffix = 193,
		UnsignedSuffix = 194,
		FloatSuffix = 195,
		Exponent = 196,
		Vocabulary = 197,
		Number = 198,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_STDCTokenTypes_hpp_*/
