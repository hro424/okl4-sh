/* 
 * This is an automatically-generated file.
 * Source file REMOVED_FOR_TESTING
 * Output file  : -
 * Platform     : V4 Generic (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH generic_biguuid


#define MAGPIE_BYTES_PER_WORD (sizeof(L4_Word_t))

#ifdef __cplusplus
extern "C" {
#endif
#include "idl4biguuid/idl4.h"
#ifdef __cplusplus
}
#endif





#if !defined(__-__)
#define __-__




/* Interface allvoid */
#if !defined(_objdef___allvoid)
#define _objdef___allvoid
typedef CORBA_Object allvoid;
#endif // !defined(_objdef___allvoid)




#if !defined(_funcdef___allvoid_afunc)
#define _funcdef___allvoid_afunc
/* Biguuid generic code: _MAGPIE_ALLVOID_AFUNC_CALL_ID is simply the function number.
 * The interface ID is encoded as a separate input parameter. 
*/
#define _MAGPIE_ALLVOID_AFUNC_CALL_ID (0u)

static inline void allvoid_afunc (allvoid _service, CORBA_Environment *_env)
{



	long _exception;
	L4_MsgTag_t _result;

	/* NB: This union is declared volatile to work around a bug in gcc 3.3.3 */
#ifdef __cplusplus
	union _buf {
#else
	volatile union _buf {
#endif
		struct {
			long _msgtag;
			long _uuid;
			
		} _in;
		struct {
			long _msgtag;
			
		} _out;
	} _pack;
	/* marshal */
	
		
	_pack._in._uuid = 37;

	/* invoke IPC: NB we subtract the size of _msgtag. */
	_pack._in._msgtag = ((sizeof(_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + ((_MAGPIE_ALLVOID_AFUNC_CALL_ID) << 16);
	L4_MsgLoad((L4_Msg_t *)((void *)&_pack._in));
	
	
	_result = L4_Call(_service);
	
	L4_MsgStore(_result, (L4_Msg_t *)((void *)&_pack));
	

	_exception = L4_Label(_result);

	
	if (_env != 0) {
		if (!L4_IpcSucceeded(_result)) {
			*(L4_Word_t *)_env = CORBA_SYSTEM_EXCEPTION + (L4_ErrorCode() << 8);
		} else {
			*(L4_Word_t *)_env = _exception;
		}
	}

	

}
#endif // !defined(_funcdef___allvoid_afunc)





#if !defined(_funcdef___allvoid_bfunc)
#define _funcdef___allvoid_bfunc
/* Biguuid generic code: _MAGPIE_ALLVOID_BFUNC_CALL_ID is simply the function number.
 * The interface ID is encoded as a separate input parameter. 
*/
#define _MAGPIE_ALLVOID_BFUNC_CALL_ID (1u)

static inline void allvoid_bfunc (allvoid _service, CORBA_Environment *_env)
{



	long _exception;
	L4_MsgTag_t _result;

	/* NB: This union is declared volatile to work around a bug in gcc 3.3.3 */
#ifdef __cplusplus
	union _buf {
#else
	volatile union _buf {
#endif
		struct {
			long _msgtag;
			long _uuid;
			
		} _in;
		struct {
			long _msgtag;
			
		} _out;
	} _pack;
	/* marshal */
	
		
	_pack._in._uuid = 37;

	/* invoke IPC: NB we subtract the size of _msgtag. */
	_pack._in._msgtag = ((sizeof(_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + ((_MAGPIE_ALLVOID_BFUNC_CALL_ID) << 16);
	L4_MsgLoad((L4_Msg_t *)((void *)&_pack._in));
	
	
	_result = L4_Call(_service);
	
	L4_MsgStore(_result, (L4_Msg_t *)((void *)&_pack));
	

	_exception = L4_Label(_result);

	
	if (_env != 0) {
		if (!L4_IpcSucceeded(_result)) {
			*(L4_Word_t *)_env = CORBA_SYSTEM_EXCEPTION + (L4_ErrorCode() << 8);
		} else {
			*(L4_Word_t *)_env = _exception;
		}
	}

	

}
#endif // !defined(_funcdef___allvoid_bfunc)





#if !defined(_funcdef___allvoid_cfunc)
#define _funcdef___allvoid_cfunc
/* Biguuid generic code: _MAGPIE_ALLVOID_CFUNC_CALL_ID is simply the function number.
 * The interface ID is encoded as a separate input parameter. 
*/
#define _MAGPIE_ALLVOID_CFUNC_CALL_ID (2u)

static inline void* allvoid_cfunc (allvoid _service, CORBA_Environment *_env)
{



	long _exception;
	L4_MsgTag_t _result;

	/* NB: This union is declared volatile to work around a bug in gcc 3.3.3 */
#ifdef __cplusplus
	union _buf {
#else
	volatile union _buf {
#endif
		struct {
			long _msgtag;
			long _uuid;
			
		} _in;
		struct {
			long _msgtag;
			void* __retval;
			
		} _out;
	} _pack;
	/* marshal */
	
		
	_pack._in._uuid = 37;

	/* invoke IPC: NB we subtract the size of _msgtag. */
	_pack._in._msgtag = ((sizeof(_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + ((_MAGPIE_ALLVOID_CFUNC_CALL_ID) << 16);
	L4_MsgLoad((L4_Msg_t *)((void *)&_pack._in));
	
	
	_result = L4_Call(_service);
	
	L4_MsgStore(_result, (L4_Msg_t *)((void *)&_pack));
	

	_exception = L4_Label(_result);

	
	if (_env != 0) {
		if (!L4_IpcSucceeded(_result)) {
			*(L4_Word_t *)_env = CORBA_SYSTEM_EXCEPTION + (L4_ErrorCode() << 8);
		} else {
			*(L4_Word_t *)_env = _exception;
		}
	}

	/* Return normally. */
	return _pack._out.__retval;
	

}
#endif // !defined(_funcdef___allvoid_cfunc)





#if !defined(_funcdef___allvoid_dfunc)
#define _funcdef___allvoid_dfunc
/* Biguuid generic code: _MAGPIE_ALLVOID_DFUNC_CALL_ID is simply the function number.
 * The interface ID is encoded as a separate input parameter. 
*/
#define _MAGPIE_ALLVOID_DFUNC_CALL_ID (3u)

static inline void* allvoid_dfunc (allvoid _service, void *a, void **b, CORBA_Environment *_env)
{



	long _exception;
	L4_MsgTag_t _result;

	/* NB: This union is declared volatile to work around a bug in gcc 3.3.3 */
#ifdef __cplusplus
	union _buf {
#else
	volatile union _buf {
#endif
		struct {
			long _msgtag;
			long _uuid;
			void *a;
			
		} _in;
		struct {
			long _msgtag;
			void *b;
			void* __retval;
			
		} _out;
	} _pack;
	/* marshal */
	
		
		
		
		_pack._in.a = (void*)a;
	
	_pack._in._uuid = 37;

	/* invoke IPC: NB we subtract the size of _msgtag. */
	_pack._in._msgtag = ((sizeof(_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + ((_MAGPIE_ALLVOID_DFUNC_CALL_ID) << 16);
	L4_MsgLoad((L4_Msg_t *)((void *)&_pack._in));
	
	
	_result = L4_Call(_service);
	
	L4_MsgStore(_result, (L4_Msg_t *)((void *)&_pack));
	

	_exception = L4_Label(_result);

	if (IDL4_EXPECT_TRUE((L4_IpcSucceeded(_result)) && !_exception)) {
		/* unmarshal */
		
			*b = _pack._out.b;
		
	}
	
	if (_env != 0) {
		if (!L4_IpcSucceeded(_result)) {
			*(L4_Word_t *)_env = CORBA_SYSTEM_EXCEPTION + (L4_ErrorCode() << 8);
		} else {
			*(L4_Word_t *)_env = _exception;
		}
	}

	/* Return normally. */
	return _pack._out.__retval;
	

}
#endif // !defined(_funcdef___allvoid_dfunc)





#endif //__-__
