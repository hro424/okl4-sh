/* 
 * This is an automatically-generated file.
 * Source file REMOVED_FOR_TESTING
 * Output file  : -
 * Platform     : V4 Generic
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/


#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH generic



#define MAGPIE_BYTES_PER_WORD (sizeof(L4_Word_t))

#ifdef __cplusplus
extern "C" {
#endif
#include "idl4/idl4.h"
#ifdef __cplusplus
}
#endif





#if !defined(__-__)
#define __-__




/* Interface with_kernelmsg */
#if !defined(_objdef___with_kernelmsg)
#define _objdef___with_kernelmsg
typedef CORBA_Object with_kernelmsg;
#endif // !defined(_objdef___with_kernelmsg)




#if !defined(_funcdef___with_kernelmsg_pagefault)
#define _funcdef___with_kernelmsg_pagefault
/* ID = -2, signifying a kernel message (refer L4 user manual) */
#define _MAGPIE_WITH_KERNELMSG_PAGEFAULT_CALL_ID ((-2UL) << 4) 

static inline void with_kernelmsg_pagefault (with_kernelmsg _service, int addr, int ip, int priv, idl4_fpage_t *fp, CORBA_Environment *_env)
{



	long _exception;
	L4_MsgTag_t _result;
	L4_Word_t _asynch_mask;

	/* NB: This union is declared volatile to work around a bug in gcc 3.3.3 */
#ifdef __cplusplus
	union _buf {
#else
	volatile union _buf {
#endif
		struct {
			long _msgtag;
			int addr;
			int ip;
			
		} _in;
		struct {
			long _msgtag;
			idl4_fpage_t fp;
			
		} _out;
	} _pack;
	/* marshal */
	L4_Accept(_env->_rcv_window);
	_pack._in.addr = (int)addr;
	_pack._in.ip = (int)ip;

	/* invoke IPC: NB we subtract the size of _msgtag. */
	_pack._in._msgtag = ((sizeof(_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + ((_MAGPIE_WITH_KERNELMSG_PAGEFAULT_CALL_ID+(priv & 7)) << 16);
	L4_MsgLoad((L4_Msg_t *)((void *)&_pack._in));
	L4_Accept(_env->_rcv_window);
		_asynch_mask = L4_Get_NotifyMask();
	L4_Set_NotifyMask(0);

	_result = L4_Call(_service);
		L4_Set_NotifyMask(_asynch_mask);

	L4_MsgStore(_result, (L4_Msg_t *)((void *)&_pack));
	L4_Accept(L4_UntypedWordsAcceptor);

	_exception = L4_Label(_result);

	if (IDL4_EXPECT_TRUE((L4_IpcSucceeded(_result)) && !_exception)) {
		/* unmarshal */
		
			*fp = _pack._out.fp;
		
	}
	
	if (_env != 0) {
		if (!L4_IpcSucceeded(_result)) {
			*(L4_Word_t *)_env = CORBA_SYSTEM_EXCEPTION + (L4_ErrorCode() << 8);
		} else {
			*(L4_Word_t *)_env = _exception;
		}
	}

	

}
#endif // !defined(_funcdef___with_kernelmsg_pagefault)





#if !defined(_funcdef___with_kernelmsg_fake_pagefault)
#define _funcdef___with_kernelmsg_fake_pagefault
/* the *_CALL_ID is defined as 64 * the interface ID, plus the function number.
 * This restricts us to 64 functions per interface.
*/
#define _MAGPIE_WITH_KERNELMSG_FAKE_PAGEFAULT_CALL_ID (64 * (37) + 1u) 

static inline void with_kernelmsg_fake_pagefault (with_kernelmsg _service, int addr, int ip, int priv, idl4_fpage_t *fp, CORBA_Environment *_env)
{



	long _exception;
	L4_MsgTag_t _result;
	L4_Word_t _asynch_mask;

	/* NB: This union is declared volatile to work around a bug in gcc 3.3.3 */
#ifdef __cplusplus
	union _buf {
#else
	volatile union _buf {
#endif
		struct {
			long _msgtag;
			int addr;
			int ip;
			int priv;
			
		} _in;
		struct {
			long _msgtag;
			idl4_fpage_t fp;
			
		} _out;
	} _pack;
	/* marshal */
	
	_pack._in.addr = (int)addr;
	_pack._in.ip = (int)ip;
	_pack._in.priv = (int)priv;

	/* invoke IPC: NB we subtract the size of _msgtag. */
	_pack._in._msgtag = ((sizeof(_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + ((_MAGPIE_WITH_KERNELMSG_FAKE_PAGEFAULT_CALL_ID) << 16);
	L4_MsgLoad((L4_Msg_t *)((void *)&_pack._in));
	
		_asynch_mask = L4_Get_NotifyMask();
	L4_Set_NotifyMask(0);

	_result = L4_Call(_service);
		L4_Set_NotifyMask(_asynch_mask);

	L4_MsgStore(_result, (L4_Msg_t *)((void *)&_pack));
	

	_exception = L4_Label(_result);

	if (IDL4_EXPECT_TRUE((L4_IpcSucceeded(_result)) && !_exception)) {
		/* unmarshal */
		
			*fp = _pack._out.fp;
		
	}
	
	if (_env != 0) {
		if (!L4_IpcSucceeded(_result)) {
			*(L4_Word_t *)_env = CORBA_SYSTEM_EXCEPTION + (L4_ErrorCode() << 8);
		} else {
			*(L4_Word_t *)_env = _exception;
		}
	}

	

}
#endif // !defined(_funcdef___with_kernelmsg_fake_pagefault)





#endif //__-__
