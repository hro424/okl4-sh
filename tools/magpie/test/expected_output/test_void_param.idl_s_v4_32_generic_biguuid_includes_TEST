/* 
 * This is an automatically-generated file.
 * Source file REMOVED_FOR_TESTING
 * Output file  : -
 * Platform     : V4 Generic (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH generic_biguuid

#define MAGPIE_BYTES_PER_WORD (sizeof(L4_Word_t))

#ifdef __cplusplus
extern "C" {
#endif
#include "idl4biguuid/idl4.h"
#ifdef __cplusplus
}
#endif





#if !defined(__-__)
#define __-__




/* Interface allvoid */
void allvoid_server(void);
void allvoid_discard(void);


#define ALLVOID_DEFAULT_VTABLE { (idl4_function) service_allvoid_afunc, (idl4_function) service_allvoid_bfunc, (idl4_function) service_allvoid_cfunc, (idl4_function) service_allvoid_dfunc }
#define ALLVOID_DEFAULT_VTABLE_SIZE 4


#define ALLVOID_MAX_FID 3
#define ALLVOID_MSGBUF_SIZE 0 /* Unimplemented */
#define ALLVOID_STRBUF_SIZE 0 /* Unimplemented */
#define ALLVOID_FID_MASK 0x3







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_allvoid_afunc;

long service_allvoid_afunc(L4_ThreadId_t _caller, _param_allvoid_afunc *_par);

inline void allvoid_afunc_implementation (CORBA_Object _caller, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_ALLVOID_AFUNC_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_ALLVOID_AFUNC(_func) long service_allvoid_afunc(L4_ThreadId_t _caller, _param_allvoid_afunc *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Marshal */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_ALLVOID_AFUNC_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_ALLVOID_AFUNC_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
	} \
	return -1; \
}




#define IDL4_PUBLISH_allvoid_afunc IDL4_PUBLISH_ALLVOID_AFUNC
static inline void allvoid_afunc_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */
	_buf._out._msgtag = ((sizeof(_buf._out) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_allvoid_bfunc;

long service_allvoid_bfunc(L4_ThreadId_t _caller, _param_allvoid_bfunc *_par);

inline void allvoid_bfunc_implementation (CORBA_Object _caller, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_ALLVOID_BFUNC_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_ALLVOID_BFUNC(_func) long service_allvoid_bfunc(L4_ThreadId_t _caller, _param_allvoid_bfunc *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Marshal */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_ALLVOID_BFUNC_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_ALLVOID_BFUNC_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
	} \
	return -1; \
}




#define IDL4_PUBLISH_allvoid_bfunc IDL4_PUBLISH_ALLVOID_BFUNC
static inline void allvoid_bfunc_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */
	_buf._out._msgtag = ((sizeof(_buf._out) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		void* __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_allvoid_cfunc;

long service_allvoid_cfunc(L4_ThreadId_t _caller, _param_allvoid_cfunc *_par);

inline void* allvoid_cfunc_implementation (CORBA_Object _caller, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_ALLVOID_CFUNC_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_ALLVOID_CFUNC(_func) long service_allvoid_cfunc(L4_ThreadId_t _caller, _param_allvoid_cfunc *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Marshal */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_ALLVOID_CFUNC_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_ALLVOID_CFUNC_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
	} \
	return -1; \
}




#define IDL4_PUBLISH_allvoid_cfunc IDL4_PUBLISH_ALLVOID_CFUNC
static inline void allvoid_cfunc_reply(CORBA_Object _client , void* __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			void* __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */
	_buf._out._msgtag = ((sizeof(_buf._out) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		void *a;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		void *b;
		void* __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_allvoid_dfunc;

long service_allvoid_dfunc(L4_ThreadId_t _caller, _param_allvoid_dfunc *_par);

inline void* allvoid_dfunc_implementation (CORBA_Object _caller, void *a, void **b, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_ALLVOID_DFUNC_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_ALLVOID_DFUNC(_func) long service_allvoid_dfunc(L4_ThreadId_t _caller, _param_allvoid_dfunc *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.a, &_par->_out.b, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Marshal */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_ALLVOID_DFUNC_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_ALLVOID_DFUNC_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
	} \
	return -1; \
}




#define IDL4_PUBLISH_allvoid_dfunc IDL4_PUBLISH_ALLVOID_DFUNC
static inline void allvoid_dfunc_reply(CORBA_Object _client, void * * b , void* __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			void *b;
			
			void* __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.b = * b;
	
	_par->_out.__retval = __retval;
	
	/* send message */
	_buf._out._msgtag = ((sizeof(_buf._out) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





#endif //__-__
