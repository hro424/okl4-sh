!!explicit_linebreaks
#if !defined(/*-?generator.get_ifdefable_filename()-*/)\n
#define /*-?generator.get_ifdefable_filename()-*/\n
/* \n
 * This is an automatically-generated file.\n
 * Source file  : {*-?generator.get_idl_filename()-*}\n
 * Output file  : {*-?generator.get_output_filename()-*}\n
 * Platform     : V4 Generic (big UUID)\n
 * Mapping      : {*-?templates.MAPPING-*}\n
 *\n
 * Generated by {*-?file.version_string-*}\n
*/\n
\n
#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */\n
#define IDL4_USE_FASTCALL 0 /* Unimplemented */\n
#define IDL4_NEED_MALLOC 0 /* Unimplemented */\n
#define IDL4_API v4\n
#define IDL4_ARCH generic_biguuid\n
\n
#ifdef __cplusplus\n
extern "C" {\n
#endif\n
#include "idl4biguuid/idl4.h"\n
#include "idl4biguuid/magpie.h"\n
#include "l4/message.h"\n
#ifdef __cplusplus\n
}\n
#endif\n
\n
/*LOOP importname = generator.get_imports()*/
#include "/*-?importname-*/"\n
/*ENDLOOP*/
\n
/*-
 # Define all integer constants as C preprocessor #defines.  
 # This can be used to get around the fact that you can't switch on const
 # ints in C, but only on int literals.
-*/
/*LOOP type_ast = generator.search( ['type_instance', {'meta_type': 'const'}] )*/
/*-basic_type = type_ast.the('target').the('type')-*/
/*-if basic_type.leaf in ('int', 'unsigned int', 'long', 'unsigned long', 'signed int', 'signed long')*/
#define _C_/*-?type_ast.leaf.upper()-*/ /*-?flatten(type_ast.the('declarator').the('expression'))-*/\n
#define /*-?type_ast.leaf.upper()-*/ /*-?flatten(type_ast.the('declarator').the('expression'))-*/\n
/*fi-*/
/*ENDLOOP*/

/* Magpie service main loop. */\n
\n
/*LOOP interface = generator.get_interfaces()*/
/* Interface {*-?interface.get_name()-*} */\n
/*LOOP function = interface.get_functions()*/
\n
/*-
if function.get_is_pagefault():
	unmarshal_start = 1
else:
	unmarshal_start = 2
-*/
/*-
if function.get_is_pagefault():
	# No UUID for pagefaults.
	msg_params_in = []
else:
	msg_params_in = [('long', '_uuid')]

msg_params_in.extend([(item['typename'], '%s%s' % (item['indirection'], item['name'])) for item in function.get_params_in()])

msg_params_out = [(item['typename'], '%s%s' % (item['indirection'], item['name'])) for item in function.get_params_out()]

msg_params_inout = [(item['typename'], '%s%s' % (item['indirection'], item['name'])) for item in function.get_params_inout()]

if function.get_return_type() != 'void':
	msg_params_out.append( (function.get_return_type(), '__retval') )
-*/

/*-function_implementation_name = function.get_name() + '_impl' -*/

/*-func_signature= ', '.join (['L4_ThreadId_t caller'] + ['%s %s' % (param.c_typename, param['name']) for param in function.get_call_params()] + ['idl4_server_environment *env'])-*/
/* Prototype for the function which implements this service. Implement this. */\n
/*-?function.get_return_type()-*/ /*-?function_implementation_name-*/(/*-?func_signature-*/);\n
\n
/* Reply-only function, for callbacks. */\n
static inline void /*-?function.get_name()-*/_reply(CORBA_Object _client/*LOOP function.get_params_out()*/, /*-?LOOPITEM['typename']-*/ /*-?LOOPITEM['indirection']-*/ /*-?LOOPITEM['c_impl_indirection']-*/ /*-?LOOPITEM['name']-*//*ENDLOOP*/ /*-if function.get_return_type() != 'void'*/, /*-?function.get_return_type()-*/ __return /*fi-*/);

static inline void\n
/*-?function.get_name()-*/_reply(CORBA_Object _client/*LOOP function.get_params_out()*/, /*-?LOOPITEM.c_typename-*/ /*-?LOOPITEM['name']-*//*ENDLOOP*/ /*-if function.get_return_type() != 'void'*/, /*-?function.get_return_type()-*/ __return /*fi-*/)\n
{\n
	byte *mr = (void *)L4_MRStart();\n
	/* Marshal */\n
/*LOOP cmd, args = function.marshal('out', startword = 1)*/
	/*-run(templates.get(cmd), args = args)-*/
/*ENDLOOP*/
	/* Return number of return MRs used */\n
/*-if function.has_varlength_params_out()*/
	/* Number of registers used depends on length of variable-length portion */\n
	*((L4_Word_t *)(void *)(&mr[0])) = ((L4_Word_t)(mr_varptr - mr) / sizeof(L4_Word_t));\n
/*fi-*/
/*-if not function.has_varlength_params_out()*/
	*((L4_Word_t *)(void *)(&mr[0])) = 1 + /*-? function.marshal_size_inwords_out()-*/;\n
/*fi-*/
\n
	/* send message */\n
	L4_MsgLoad((L4_Msg_t *)mr);\n
	L4_Reply(_client);\n
}\n
\n

/* End of function {*-?function.get_name()-*}*/\n

/*ENDLOOP*/
\n
/*ENDLOOP*/

/*-if generator.get_irq_handler()*/
void /*-?generator.get_irq_handler_name()-*/(L4_ThreadId_t);\n
/*fi-*/

/*-if generator.get_async_handler()*/
void /*-?generator.get_async_handler_name()-*/(L4_Word_t);\n
/*fi-*/

/*-if generator.get_exception_handler()*/
void /*-?generator.get_exception_handler()-*/(L4_ThreadId_t *, L4_Word_t *);\n
/*fi-*/

/*-if generator.get_unknown_ipc_handler()*/
void /*-?generator.get_unknown_ipc_handler()-*/(L4_ThreadId_t *, L4_Word_t *);\n
/*fi-*/

/*-workloop_function = generator.get_workloop_function()-*/
/*-if workloop_function*/
void /*-?workloop_function-*/(void);\n
/*fi-*/

void /*-?generator.get_server_loop_name()-*/(void);\n
\n

#endif //{*-?generator.get_ifdefable_filename()-*}\n
