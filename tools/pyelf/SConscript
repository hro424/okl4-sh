#####################################################################
# Copyright (c) 2008 Open Kernel Labs, Inc. (Copyright Holder).
# All rights reserved.
# 
# 1. Redistribution and use of OKL4 (Software) in source and binary
# forms, with or without modification, are permitted provided that the
# following conditions are met:
# 
#     (a) Redistributions of source code must retain this clause 1
#         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
#         (Licence Terms) and the above copyright notice.
# 
#     (b) Redistributions in binary form must reproduce the above
#         copyright notice and the Licence Terms in the documentation and/or
#         other materials provided with the distribution.
# 
#     (c) Redistributions in any form must be accompanied by information on
#         how to obtain complete source code for:
#        (i) the Software; and
#        (ii) all accompanying software that uses (or is intended to
#        use) the Software whether directly or indirectly.  Such source
#        code must:
#        (iii) either be included in the distribution or be available
#        for no more than the cost of distribution plus a nominal fee;
#        and
#        (iv) be licensed by each relevant holder of copyright under
#        either the Licence Terms (with an appropriate copyright notice)
#        or the terms of a licence which is approved by the Open Source
#        Initative.  For an executable file, "complete source code"
#        means the source code for all modules it contains and includes
#        associated build and other files reasonably required to produce
#        the executable.
# 
# 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
# LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
# IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
# EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
# THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
# BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
# PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
# THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
# 
# 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#####################################################################
import glob
import os
import os.path

Import('*')

sources = Flatten([src_glob(glb) for glb in [#"elfweaver.py",
                                             "elf/*.py",
                                             "elf/abi/*.py",
                                             "parsers/*.py",
                                             "parsers/cxxfilt/*.py",
                                             "parsers/gnu/*.py",
                                             "parsers/rvct/*.py",
                                             "antlr/*.py",
                                             "weaver/*.py",
                                             "weaver/extensions/*.py",
                                             "weaver/cells/*.py",
                                             "weaver/cells/iguana/*.py"]])

os_sysname, _, _, _, os_machine = os.uname()
env.scons_env['OKPYTHONPATH'] = '/opt/okl/%s-%s/stow/okpython' % (os_sysname, os_machine)
env.scons_env['OKLIBPATH'] = '$OKPYTHONPATH/extra-libs'


custpath = "#cust/%s/tools/pyelf" % args['cust']

if not os.path.exists(Dir(custpath).abspath):
    custpath = "#tools/cust/%s/pyelf" % args['cust']

cust_nano_glob = custpath + "/weaver/nano_*py"
cust_abi_glob = custpath + "/elf/abi/*py"


if args['cust'] != 'okl':
    customer_nano_files = [x for x in src_glob(cust_nano_glob)]
    customer_abi_files = [x for x in src_glob(cust_abi_glob)
                          if "__init__.py" not in x]
else:
    customer_nano_files = []
    customer_abi_files = []

local_abi_files = src_glob("elf/abi/*py")
local_nano_files = src_glob("weaver/nano_*py")

abi_files = local_abi_files + ["elf/abi/" + filename.split("/")[-1] for filename in customer_abi_files]
abi_modules = [filename.replace("/", ".")[:-3] for filename in abi_files]

nano_files = local_nano_files + ["weaver/" + filename.split("/")[-1] for filename in customer_nano_files]
nano_modules = [filename.replace("/", ".")[:-3] for filename in nano_files]

def test_func(src):
    return src.endswith(".py")

copy = env.CopyTree(".", "#/tools/pyelf", test_func)

freeze = Action([(
    "$OKPYTHONPATH/Python/python $OKPYTHONPATH/Python/Tools/freeze/freeze.py "
    "-q -o ${TARGET.dir} $SOURCE -m %s encodings.ascii encodings.utf_8 encodings.string_escape weaver.nano_tcb_arm weaver.nano_mappings_arm && "
    'make -j %d -s -C${TARGET.dir} LDFLAGS="-L$OKLIBPATH/libxslt/libxslt/.libs '
    '-L$OKLIBPATH/libxml2/.libs -L$OKLIBPATH/libxslt/libexslt/.libs -static"' % \
    (' '.join(abi_modules + nano_modules), GetOption('num_jobs')))],
                "[ICE ] $TARGET")

elfweaver_froze = env.Command(os.path.join(env.builddir, "freeze_elfweaver", 'elfweaver'),
                              ['elfweaver.py'] + copy,
                              freeze)
elfweaver =\
          env.scons_env.Install(os.path.join(env.builddir, "bin"),
                                elfweaver_froze)
elfadorn_froze = env.Command(os.path.join(env.builddir, "freeze_elfadorn", 'elfadorn'),
                               ['elfadorn.py'] + copy,
                              freeze)
elfadorn =\
          env.scons_env.Install(os.path.join(env.builddir, "bin"),
                                elfadorn_froze)


local = Dir(env.builddir).path
copypath = Dir("#cust/%s/tools/pyelf" % args['cust']).path
destpath = local + "/object/tools_pyelf"
copyact = Action('tar -cf - $$(find %s -name "*py") 2> /dev/null | tar -xf - -C%s && '
                 ' cp -r %s/%s/* %s && rm -rf %s/cust' % \
                 (Dir(custpath).path, destpath, destpath, custpath[1:], destpath, destpath),
                 '[COPY] $TARGET')

env.scons_env.AddPreAction(elfweaver_froze, copyact)
env.scons_env.AddPreAction(elfadorn_froze, copyact)


Return('elfweaver', 'elfadorn')
