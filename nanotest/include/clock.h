/*
 * Copyright (c) 2008 Open Kernel Labs, Inc. (Copyright Holder).
 * All rights reserved.
 *
 * 1. Redistribution and use of OKL4 (Software) in source and binary
 * forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *     (a) Redistributions of source code must retain this clause 1
 *         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
 *         (Licence Terms) and the above copyright notice.
 *
 *     (b) Redistributions in binary form must reproduce the above
 *         copyright notice and the Licence Terms in the documentation and/or
 *         other materials provided with the distribution.
 *
 *     (c) Redistributions in any form must be accompanied by information on
 *         how to obtain complete source code for:
 *        (i) the Software; and
 *        (ii) all accompanying software that uses (or is intended to
 *        use) the Software whether directly or indirectly.  Such source
 *        code must:
 *        (iii) either be included in the distribution or be available
 *        for no more than the cost of distribution plus a nominal fee;
 *        and
 *        (iv) be licensed by each relevant holder of copyright under
 *        either the Licence Terms (with an appropriate copyright notice)
 *        or the terms of a licence which is approved by the Open Source
 *        Initative.  For an executable file, "complete source code"
 *        means the source code for all modules it contains and includes
 *        associated build and other files reasonably required to produce
 *        the executable.
 *
 * 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
 * LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
 * IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
 * EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
 * THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
 * PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
 * THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
 * BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
 * THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
 * PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
 * PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
 * THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
 *
 * 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Clock driver.
 */

#ifndef CLOCK_H
#define CLOCK_H

#include <stdint.h>

/* Initialize the clock */
void clock_init(void);

/* Fire an interrupt in the specified time. */
void clock_wait(uint64_t time);

/* Read the current value of the clock. */
uint64_t clock_read(void);

/* interrupt benchmarking clock interface 
 * Do not use these four functions unless you know what you are doing
 */

/* generate an interrupt after the specified time (in microseconds) */
void clock_generate_interrupt(uint64_t time);
/* process an interrupt generated by clock_generate_interrupt */
int clock_process_interrupt(void);
/* deregister for the clock interrupt */
void clock_deregister_interrupt(void);
/* register for a clock interrupt - returns the interrupt to wait for */
int clock_register_interrupt(void);

/* Test the clock driver */
void clock_test(void);

/* clock is in uS */
#define CLOCK_HZ 1000000

#ifndef CPU_HZ
/* default 100 MHz CPU */
#define CPU_HZ           100000000
#endif

#ifndef CYCLES_PER_TICK
#define CYCLES_PER_TICK  ((CPU_HZ + CLOCK_HZ - 1) / CLOCK_HZ)
#endif

/*
 * Define different pause times.
 *
 * Each pause is defined by a number of cycles, assuming a 100MHz
 * processor. Faster processors will get more work done in the
 * pauses.
 */
#define CYCLES_PAUSE(x)  ((x + CYCLES_PER_TICK - 1) / CYCLES_PER_TICK)
#define SHORT_PAUSE      CYCLES_PAUSE(1000)                /* >= 100 cycles */
#define MEDIUM_PAUSE     CYCLES_PAUSE(10000)               /* >= 1000 cycles */
#define LONG_PAUSE       CYCLES_PAUSE(100000)              /* >= 10000 cycles */

#endif /* CLOCK_H */

