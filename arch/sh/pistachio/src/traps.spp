/**
 * @brief   SH7780 trap handling routine
 * @file    arch/sh/pistachio/src/traps.spp
 * @since   December 8, 2008
 * @author  Hiroo Ishikawa <ishikawa.info.waseda.ac.jp>
 */

#include <asmsyms.h>
#include <tcb_layout.h>
#include <arch/asm.h>
#include <arch/config.h>
#include <arch/exception.h>
#include <arch/globals.h>
#include <arch/syscalls.h>
#include <arch/thread.h>
#include <kernel/arch/asm.h> //TODO: Integrate this with asm.h
#include <kernel/arch/config.h>
#include <l4/arch/vregs.h>


#define KERNEL_STACK                __stack + STACK_TOP
#define TLB_HANDLER                 handle_tlb_exception
#define FIRST_WRITE_HANDLER         handle_first_write


/*
 * Locate the trap vector in the P1 or P2 domain in order to avoid double
 * fault.
 *
 * P1 (0x80000000 - 0x9FFFFFFF):
 *      Cacheable but address translation via TLB is impossible.
 * P2 (0xA0000000 - 0xBFFFFFFF):
 *      Uncacheable and address translation via TLB is impossible.
 */

/*
 * Initialize the layout of the trap handler
 */
TRAPS_BEGIN_MARKER

/*
 * GENERAL EXCEPTION HANDLER (VBR, Offset:0x100)
 */
BEGIN_PROC_TRAPS(sh_general_exception, 0x100)
        /* Using register bank 1 (privileged bank) */

        /*
         * Store the exception event register, which includes 11-bit of
         * exception code, to r0 in bank1.
         */
        mov.l   1f, r0
        mov.l   @r0, r0

        /* Branch to a vector.  r0 holds EXPEVT */
        mov.l   2f, r1
        add     r0, r1
        jmp     @r1
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   REG_EXPEVT
2:      .long   sh_general_exception

        ALIGN   0x80

        /*
         * General Exception Vector
         * Each vector immediately jumps to a procedure.
         */
        /* Vector 1: First write (offset: 0x80) */
        EXP_VECTOR(exp_first_write)

        /* Vector 2: TLB Protection Violation (read) (offset: 0xA0) */
        EXP_VECTOR(exp_memory_exception)

        /* Vector 3: TLB Protection Violation (write) (offset: 0xC0) */
        EXP_VECTOR(exp_memory_exception)

        /* Vector 4: Address Error (read) (offset: 0xE0) */
        EXP_VECTOR(exp_address_error)

        /* Vector 5: Address Error (write) (offset: 0x100) */
        EXP_VECTOR(exp_address_error)

        /* Vector 6: FPU Exception (offset: 0x120) */
        EXP_VECTOR(exp_instruction_exception)

        .skip   0x20

        /* Vector 7: TRAPA (offset: 0x160) */
        EXP_VECTOR(exp_trapa_handler)

        /* Vector 8: Invalid Instruction (offset: 0x180) */
        EXP_VECTOR(exp_instruction_exception)

        /* Vector 9: Slot Invalid Instruction (offset: 0x1A0) */
        EXP_VECTOR(exp_instruction_exception)

        .skip   0x20

        /* Vector 9: User Break (offset: 0x1E0) */
        EXP_VECTOR(exp_user_break)

END_PROC_TRAPS(sh_general_exception)

/*
 * Restores the context out of continuation.
 */
BEGIN_PROC(abort_return)
BEGIN_LOCAL_PROC(common_return)
        /* Check if returning to kernel. */
        /* NOTE: Activating continuation resets the stack pointer. */
        mov     r15, r0
        mov.l   2f, r1
        and     r1, r0
        cmp/eq  r1, r0
        bf      10f

        /* Restore the context from TCB. */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
10:
        RESTORE_CONTEXT
        rte
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   STACK_TOP
END_LOCAL_PROC(common_return)
END_PROC(abort_return)


/*
 * TLB miss handler vector
 * NOTE: Must be placed at VBR + 0x400
 */
BEGIN_PROC_TRAPS(sh_tlb_miss, 0x400)
        /* Using the register bank 1 */

        /* Check whether it is raised in user or kernel mode */
        stc     ssr, r0
        rotl    r0
        rotl    r0
        bt      kernel_tlb_miss

        /* From user */
        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   2f, r0
        add     r0, r15
        bra     11f

kernel_tlb_miss:
        /* Load the kernel stack if the current sp doesn't hold it. */
        mov     r15, r0
        mov.l   7f, r1
        or      r1, r0
        mov.l   4f, r1
        cmp/eq  r1, r0
        bt      11f
        mov     r1, r15
11:
        SAVE_CONTEXT
        /* Using the register bank 0 */

        /*
         * The exception event register contains the access mode, such as
         * read (0x40) or write (0x60).  Pass it via the first argument.
         */
        mov.l   3f, r4
        mov.l   @r4, r4

        /* Pass the context via the second argument */
        mov     r15, r5

        /* Check whether it is raised in user or kernel mode */
        stc     ssr, r0
        rotl    r0
        rotl    r0

        /* Load the kernel stack if from user mode*/
        bt      12f
        mov.l   4f, r15
12:
        clrt

        /* Set up continuation */
        mov.l   5f, r0
        lds     r0, pr

        /* Call the handler */
        mov.l   6f, r0
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   SIZEOF_CONTEXT
3:      .long   REG_EXPEVT
4:      .long   KERNEL_STACK
5:      .long   common_return
6:      .long   TLB_HANDLER
7:      .long   STACK_TOP

END_PROC_TRAPS(sh_tlb_miss)


/*
 * IRQ handler vector
 * NOTE: Must be placed at 0x600 (= 0x400 + 0x200)
 * TODO: Handling multiple interrupts
 */
BEGIN_PROC_TRAPS(sh_interrupt, 0x200)
        /* Using the register bank 1 */

        /* Check whether it is raised in user or kernel mode */
        stc     ssr, r0
        rotl    r0
        rotl    r0
        bt      7f

        /* From user */
        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   2f, r0
        add     r0, r15

7:
        SAVE_CONTEXT
        /* Using the register bank 0 */

        /*
         * Read the interrupt event register.
         * Pass it via the second argument.
         */
        mov.l   3f, r5
        mov.l   @r5, r5

        /* Pass the saved context via the first argument */
        mov     r15, r4

        /* Set up continuation */
        mov.l   4f, r0
        lds     r0, pr

        bt      kernel_interrupt

        /* Load the kernel stack */
        mov.l   5f, r15

        mov.l   6f, r0
        jmp     @r0
        nop
        /* NOT REACHED */

LABEL(kernel_interrupt)
        /* Handle an interrupt raised in kernel mode */
        clrt
        mov.l   6f, r0
        jsr     @r0
        nop

        /* Get current TCB to get continuation */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_PREEMPTION_CONTINUATION, r15
        mov.l   @r15, r0

        /* Reset the kernel stack */
        mov.l   5f, r15

        /* Go to continuation */
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   SIZEOF_CONTEXT
3:      .long   REG_INTEVT
4:      .long   common_return
5:      .long   KERNEL_STACK
6:      .long   soc_handle_interrupt

END_PROC_TRAPS(sh_interrupt)


/*
 * The rest of general exception vectors
 * NOTE: Must be placed at VBR + 0x800
 */
        ALIGN   0x200

        /* Vector 10: Invalid FPU Instruction (offset: 0x800) */
        EXP_VECTOR(exp_instruction_exception)

        /* Vector 11: Slot Invalid FPU Instruction (offset: 0x820) */
        EXP_VECTOR(exp_instruction_exception)



BEGIN_LOCAL_PROC(exp_first_write)
        /* Using the register bank 1 */

        /* Check whether it was raised in user or kernel mode */
        stc     ssr, r0
        rotl    r0
        rotl    r0
        bt      10f

        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   5f, r0
        add     r0, r15
10:
        SAVE_CONTEXT
        /* Using the register bank 0 */

        /* Load the kernel stack if from user mode */
        bt      11f
        mov.l   2f, r15
11:
        clrt

        /* Set up continuation */
        mov.l   3f, r0
        lds     r0, pr

        /*
         * Call the handler
         */
        mov.l   4f, r0
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   KERNEL_STACK
3:      .long   common_return
4:      .long   FIRST_WRITE_HANDLER
5:      .long   SIZEOF_CONTEXT
END_LOCAL_PROC(exp_first_write)


/*
 * Deals with TLB protection violation (read/write) (ecode: 0x0A0/0x0C0).
 * Invokes the page fault handler that sends a page fault message to user.
 */
BEGIN_LOCAL_PROC(exp_memory_exception)
        /* Using the register bank 1 */

        /* Check whether it was raised in user or kernel mode */
        stc     ssr, r0
        rotl    r0
        rotl    r0
        bt      10f

        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   5f, r0
        add     r0, r15
10:
        SAVE_CONTEXT
        /* Using the register bank 0 */

        /* Pass EXPEVT to the handler via the first argument.  */
        /* r0 in bank1 holds EXPEVT. */
        stc     r0_bank, r4

        /*
         * Pass the current context to the handler via the second argument.
         * The context is supposed to be saved to a TCB in the handler so that
         * the kernel return routine restores the context.
         */
        mov     r15, r5

        /* Load the kernel stack if from user mode */
        bt      11f
        mov.l   2f, r15
11:
        clrt

        /* Set up continuation */
        mov.l   3f, r0
        lds     r0, pr

        /*
         * Call the handler
         */
        mov.l   4f, r0
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   KERNEL_STACK
3:      .long   common_return
4:      .long   TLB_HANDLER
5:      .long   SIZEOF_CONTEXT

END_LOCAL_PROC(exp_memory_exception)


BEGIN_LOCAL_PROC(exp_instruction_exception)
        /* Check whether it was raised in user or kernel mode */
        stc     ssr, r0
        rotl    r0
        rotl    r0
        bt      10f

        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   5f, r0
        add     r0, r15
10:
        SAVE_CONTEXT
        /* Using the register bank 0 */

        /*
         * Pass the exception code to the handler (a C function) via the
         * first argument. r0 in bank1 holds EXPEVT.
         */
        stc     r0_bank, r4

        /*
         * Pass the current SP, which points at sh_irq_context_t, to the
         * handler via the second argument
         */
        mov     r15, r5


        /* Load the kernel stack if from user mode */
        bt      11f
        mov.l   2f, r15
11:
        clrt

        /* Set up continuation */
        mov.l   3f, r0
        lds     r0, pr

        /* Call the handler */
        /* handle(sh_irq_context_t* context) */
        mov.l   4f, r0
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   KERNEL_STACK
3:      .long   common_return
4:      .long   handle_instruction_exception
5:      .long   SIZEOF_CONTEXT
END_LOCAL_PROC(exp_instruction_exception)


BEGIN_LOCAL_PROC(exp_address_error)
        /* Check whether it was raised in user or kernel mode */
        stc     ssr, r1
        rotl    r1
        rotl    r1
        bt      10f

        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   5f, r1
        add     r1, r15
10:
        SAVE_CONTEXT
        /* Using register bank 0 */

        /*
         * Pass the exception code to the handler (a C function) via the
         * first argument. r0 in bank1 holds EXPEVT.
         */
        stc     r0_bank, r4

        /*
         * Pass the current SP, which points at sh_irq_context_t, to the
         * handler via the second argument
         */
        mov     r15, r5

        /* Load the kernel stack */
        bt      11f
        mov.l   2f, r15
11:

        /* Set up continuation */
        mov.l   3f, r0
        lds     r0, pr

        /* Call the handler */
        /* handle(sh_irq_context_t* context) */
        mov.l   4f, r0
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   KERNEL_STACK
3:      .long   common_return
4:      .long   handle_address_error
5:      .long   SIZEOF_CONTEXT
END_LOCAL_PROC(exp_address_error)


//TODO
BEGIN_LOCAL_PROC(exp_user_break)
        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   4f, r0
        add     r0, r15

        SAVE_CONTEXT
        /* Using register bank 0 */

        /* Load the kernel stack */
        mov.l   2f, r15

        mov.l   3f, r0
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   KERNEL_STACK
3:      .long   handle_user_break
4:      .long   SIZEOF_CONTEXT
END_LOCAL_PROC(exp_user_break)


/*
 * TRAPA Handler (Exception code: 0x160)
 * Deals with three conditions:
 * 1) System calls
 * 2) Non-L4 system calls
 * 3) Other
 */
BEGIN_LOCAL_PROC(exp_trapa_handler)
        /* Using the register bank 1 (privileged bank) */

        /* See if the TRAPA code indicates a system call */
        mov.l   1f, r0
        mov.l   @r0, r0
        /* Omit 2 LSBs.  See the manual.  */
        shlr2   r0
        cmp/eq  #SYSCALL_NUM, r0
        bt      ipc_handler

        /* Not an OKL4 system call. */

        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   2f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   6f, r0
        add     r0, r15

        SAVE_CONTEXT
        /* Using the register bank 0 */

        /* Pass the context via the first argument */
        mov     r15, r4

        /* Load the kernel stack */
        mov.l   3f, r15

        /* Set the return address */
        mov.l   4f, r0
        lds     r0, pr

        /* Invoke the handler */
        mov.l   5f, r0
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   REG_TRA
2:      .long   SH_GLOBAL_BASE
3:      .long   KERNEL_STACK
4:      .long   common_return
5:      .long   handle_syscall_exception
6:      .long   SIZEOF_CONTEXT

END_LOCAL_PROC(exp_traps_handler)

/*
 * IPC handler
 */
// TODO: IPC optimization
BEGIN_LOCAL_PROC(ipc_handler)
        /* Using the register bank 1 */

        /* Save the control and system registers to TCB */
        mov.l   1f, r0
        add     #OFS_GLOBAL_CURRENT_TCB, r0
        mov.l   @r0, r0
        add     #OFS_TCB_ARCH_CONTEXT, r0
        mov.l   2f, r1
        add     r1, r0
        stc.l   sgr, @-r0
        stc.l   spc, @-r0
        stc.l   ssr, @-r0
        sts.l   pr, @-r0
        sts.l   macl, @-r0
        sts.l   mach, @-r0

        /* Branch to other system calls */
        mov     #SYSCALL_ipc, r0
        mov     #SYSCALL_lipc, r1
        cmp/eq  r0, r8
        bt      10f
        cmp/eq  r1, r8
        bf      syscall_handler
10:
        SWITCH_BANK_1_TO_0

        ENTER_P2_AREA

        /* Save message registers to UTCB */
        mov.l   1f, r10
        add     #OFS_GLOBAL_CURRENT_TCB, r10
        mov.l   @r10, r10
        add     #OFS_TCB_UTCB, r10
        mov.l   @r10, r10
        mov.l   5f, r11
        shll2   r11
        add     r11, r10
        mov.l   r6, @(0, r10)       // Save tag (mr0)

        mov.l   NILTHREAD, r11
        cmp/eq  r4, r11
        bt      11f
        mov.l   r1, @(4, r10)
        mov.l   r2, @(8, r10)
        mov.l   r3, @(12, r10)
        mov.l   r7, @(16, r10)
        mov.l   r9, @(20, r10)
11:
        ENTER_P1_AREA

        /* Switch to the kernel stack */
        mov.l   3f, r15

        /* Set the return address */
        mov.l   6f, r0
        lds     r0, pr

        /* Call sys_ipc */
        mov.l   7f, r0
        add     #4, r0
        mov.l   @r0, r0
        jmp     @r0
        nop

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   SIZEOF_CONTEXT
3:      .long   KERNEL_STACK
5:      .long   __L4_TCR_MR_OFFSET
6:      .long   ipc_syscall_return
7:      .long   sh_syscall_vectors

NILTHREAD:
        .long   0xFFFFFFFC
END_LOCAL_PROC(ipc_handler)

/*
 * System call handler
 */
BEGIN_LOCAL_PROC(syscall_handler)
        /* Using the register bank 1 */

        /* Branch to misc L4 syscalls */
        mov.l   4f, r0
        cmp/hi  r0, r8
        bt      syscall_misc

        /* Switch to the kernel stack */
        mov.l   1f, r15

        /* Set the return address */
        mov     r8, r0
        cmp/eq  #SYSCALL_ipc, r0
        mov.l   5f, r0
        bf      10f
        mov.l   6f, r0
10:
        lds     r0, pr

        SWITCH_BANK_1_TO_0

        /* Using the register bank 0 (user bank) */

        /* Restore the 5th-8th arguments */
        mov.l   r9, @-r15
        mov.l   r3, @-r15
        mov.l   r2, @-r15
        mov.l   r1, @-r15

        /* Call it.  r8 holds syscall number. */
        mov.l   7f, r0
        shll2   r8
        add     r8, r0
        mov.l   @r0, r0
        jmp     @r0
        nop
        /* NOT REACHED */

        ALIGN   4
1:      .long   KERNEL_STACK
2:      .long   SH_GLOBAL_BASE
3:      .long   SIZEOF_CONTEXT
4:      .long   SYSCALL_limit
5:      .long   syscall_return
6:      .long   ipc_syscall_return
7:      .long   sh_syscall_vectors

LABEL(sh_syscall_vectors)
        .long   0                   /* reserved */
        .long   sys_ipc
        .long   sys_thread_switch
        .long   sys_thread_control
        .long   sys_exchange_registers
        .long   sys_schedule
        .long   sys_map_control
        .long   sys_space_control
        .long   sys_cache_control
        .long   sys_ipc             /* lipc */
        .long   sys_platform_control
        .long   sys_space_switch
        .long   sys_mutex
        .long   sys_mutex_control
        .long   sys_interrupt_control
        .long   sys_cap_control
        .long   sys_memory_copy
END_LOCAL_PROC(syscall_handler)


/* KDB call, etc. */
BEGIN_LOCAL_PROC(syscall_misc)
        /* Get the pointer to sh_irq_context_t in the current TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   5f, r0
        add     r0, r15

        SAVE_CONTEXT

        /* Pass the context via the first argument */
        mov     r15, r4

        /* Load the kernel stack */
        mov.l   2f, r15

        /* Set return address */
        mov.l   3f, r0
        lds     r0, pr

        mov.l   4f, r0
        jmp     @r0
        nop

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   KERNEL_STACK
3:      .long   common_return
4:      .long   sys_sh_misc
5:      .long   SIZEOF_CONTEXT
END_LOCAL_PROC(syscall_misc)


BEGIN_PROC(ipc_syscall_return)
        /* Return the IPC partner to user via r0 */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        mov     r15, r10
        mov.l   2f, r14
        add     r14, r15
        mov.l   @r15, r0

        /* Save message registers to UTCB */
        add     #OFS_TCB_UTCB, r10
        mov.l   @r10, r10
        mov.l   5f, r11
        shll2   r11
        add     r11, r10

        mov.l   @(0, r10), r6
        mov.l   @(4, r10), r1
        mov.l   @(8, r10), r2
        mov.l   @(12, r10), r3
        mov.l   @(16, r10), r7
        mov.l   @(20, r10), r9

        /* FALL THROUGH */

LABEL(syscall_return)
        /* Restore the control and system registers from TCB */
        mov.l   1f, r15
        add     #OFS_GLOBAL_CURRENT_TCB, r15
        mov.l   @r15, r15
        add     #OFS_TCB_ARCH_CONTEXT, r15
        mov.l   3f, r14
        add     r14, r15
        
        lds.l   @r15+, mach
        lds.l   @r15+, macl
        lds.l   @r15+, pr
        ldc.l   @r15+, ssr
        ldc.l   @r15+, spc
        mov.l   @r15, r15
        rte
        nop    
        /* NOT REACHED */

        ALIGN   4
1:      .long   SH_GLOBAL_BASE
2:      .long   OFS_TCB_SENT_FROM
3:      .long   OFS_CONTEXT_MACH
5:      .long   __L4_TCR_MR_OFFSET

END_PROC(syscall_return)

