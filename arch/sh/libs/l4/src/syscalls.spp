#include <compat/asm.h>
#include <l4/arch/syscalls_asm.h>
#include <l4/arch/vregs.h>
#include <l4/arch/types_asm.h>

#define SAVE_CONTEXT        \
    sts.l   pr, @-r15;      \
    mov.l   r8, @-r15;      \
    mov.l   r9, @-r15;      \
    mov.l   r10, @-r15;     \
    mov.l   r11, @-r15;     \
    mov.l   r12, @-r15;     \
    mov.l   r13, @-r15;     \
    mov.l   r14, @-r15

#define RESTORE_CONTEXT     \
    mov.l   @r15+, r14;     \
    mov.l   @r15+, r13;     \
    mov.l   @r15+, r12;     \
    mov.l   @r15+, r11;     \
    mov.l   @r15+, r10;     \
    mov.l   @r15+, r9;      \
    mov.l   @r15+, r8;      \
    lds.l   @r15+, pr

/*
 * L4_KernelInterface
 */
EXPORT L4_KernelInterface
LABEL(L4_KernelInterface)
    SAVE_CONTEXT

    trapa   #SYSCALL_NUM

    tst     r4, r4      // if (ApiVersion)
    bt      1f
    mov.l   r1, @r4     //     *ApiVersion = r_ApiVersion;
1:
    tst     r5, r5      // if (ApiFlags)
    bt      2f
    mov.l   r2, @r5     //     *ApiFlags = r_ApiFlags;
2:
    tst     r6, r6      // if (KernelId)
    bt      3f
    mov.l   r3, @r6     //     *KernelId = r_KernelId;
3:

    /* Return result in r0. */
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_ExchangeRegisters
 */
EXPORT L4_ExchangeRegisters
LABEL(L4_ExchangeRegisters)
    /*
     * r4-r7 are used for 1st-4th arguments of a C function.  This is defined
     * by the GCC calling convention.  See $GCC_SRC/gcc/config/sh/sh.h.
     * We pass the rest of its arguments via r0-r3, leaving 1st-4th
     * arguments there.
     */
    mov.l   @(0, r15), r1       // flags
    mov.l   @(4, r15), r2       // UserDefHandle
    mov.l   @(8, r15), r3       // pager

    SAVE_CONTEXT

    mov     #SYSNUM(exchange_registers), SYSCALL_REG
    trapa   #SYSCALL_NUM

    /* r0 holds result */

    RESTORE_CONTEXT

    mov.l   @(12, r15), r2
    mov.l   r5, @r2             // *old_control = r_control;
    mov.l   @(16, r15), r2
    mov.l   r6, @r2             // *old_sp = r_sp;
    mov.l   @(20, r15), r2 
    mov.l   r7, @r2             // *old_ip = r_ip;
    mov.l   @(24, r15), r2
    mov.l   r1, @r2             // *old_flags = r_flags;
    mov.l   @(28, r15), r2
    mov.l   r2, @r2             // *old_UserDefHandle = r_userhandle;

    rts
    nop

/*
 * L4_ThreadControl
 */
EXPORT L4_ThreadControl
LABEL(L4_ThreadControl)
    /*
     * r4-r7 are used for 1st-4th arguments of a C function.  This is defined
     * by the GCC calling convention.  See $GCC_SRC/gcc/config/sh/sh.h.
     * We pass the rest of its arguments via r1-r3, leaving 1st-4th
     * arguments there.
     */
    mov.l   @(0, r15), r1       // ExceptionHandler
    mov.l   @(4, r15), r2       // resources
    mov.l   @(8, r15), r3      // *UtcbLocation

    SAVE_CONTEXT
    mov     #SYSNUM(thread_control), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_ThreadSwitch
 */
EXPORT L4_ThreadSwitch
LABEL(L4_ThreadSwitch)
    SAVE_CONTEXT
    mov     #SYSNUM(thread_switch), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_Schedule
 */
EXPORT L4_Schedule
LABEL(L4_Schedule)
    /*
     * r4-r7 are used for passing 1st-4th arguments to a C function.  This is
     * defined by the GCC calling convention.  See $GCC_SRC/gcc/config/sh/sh.h.
     * We pass the rest of its arguments via r1-r3, leaving 1st-4th
     * arguments there.
     */
    mov.l   @(0, r15), r1        // prio
    mov.l   @(4, r15), r2        // flags

    SAVE_CONTEXT

    mov     #SYSNUM(schedule), SYSCALL_REG
    trapa   #SYSCALL_NUM

    RESTORE_CONTEXT

    mov.l   @(8, r15), r2
    mov.l   r1, @r2             // *rem_timeslice = r_tslen;

    rts
    nop

/*
 * L4_Ipc
 */
EXPORT L4_Ipc
LABEL(L4_Ipc)
    SAVE_CONTEXT
    mov.l   r7, @-r15
    mov.l   r5, @-r15

    /* Only load MRs if send phase is included. */
	mov.l   nilthread, r1
    cmp/eq  r4, r1
    bt      1f

    /* Load UTCB address */
    mov.l   CONST_UTCB_BASE, r10
    mov.l   @r10, r10
    mov     #__L4_TCR_MR_OFFSET, r11
    shll2   r11
    add     r11, r10
    mov.l   @(4, r10), r1       // mr1
    mov.l   @(8, r10), r2       // mr2
    mov.l   @(12, r10), r3      // mr3
    mov.l   @(16, r10), r7      // mr4
    mov.l   @(20, r10), r9      // mr5
1:
    mov     #SYSNUM(ipc), SYSCALL_REG
    trapa   #SYSCALL_NUM

    /* Only store MRs if recv phase is included. */
    mov.l   @r15+, r10
    mov.l	nilthread, r11
    cmp/eq	r10, r11
    mov.l	@r15+, r10
    bt      2f

    /* Store the from thread ID */
    mov.l   r0, @r10

    /* Load UTCB address */
    mov.l   CONST_UTCB_BASE, r10
    mov.l   @r10, r10
    mov     #__L4_TCR_MR_OFFSET, r11
    shll2   r11
    add     r11, r10

    mov.l   r6, @(0, r10)       // tag
    mov.l   r1, @(4, r10)       // mr1
    mov.l   r2, @(8, r10)       // mr2
    mov.l   r3, @(12, r10)      // mr3
    mov.l   r7, @(16, r10)      // mr4
    mov.l   r9, @(20, r10)      // mr5
2:
    /* Return MR0 */
    mov     r6, r0
    RESTORE_CONTEXT
    rts
    nop


/*
 * L4_Notify
 */
EXPORT L4_Notify
LABEL(L4_Notify)
    SAVE_CONTEXT

    mov.l   SHIFT_NOTIFY, r6	// tag = 1 << 13
    mov     r5, r1              // mr[1] = mask
    mov.l   nilthread, r5       // receiver = nil

    mov     #SYSNUM(ipc), SYSCALL_REG
    trapa   #SYSCALL_NUM

    /* Return MR0 */
    mov     r6, r0
    RESTORE_CONTEXT
    rts
    nop

LABEL(SHIFT_NOTIFY)
    .long	1 << 13

/*
 * L4_WaitNotify
 */
EXPORT L4_WaitNotify
LABEL(L4_WaitNotify)
    SAVE_CONTEXT
    mov.l   r4, @-r15

    mov.l	nilthread, r4           // to_tid = nilthread
    mov.l	MINUS_2, r5             // from_tid = wait_notify
    mov.l	SHIFT_WAIT_NOTIFY, r6   // tag = 1 << 14

    mov     #SYSNUM(ipc), SYSCALL_REG
    trapa   #SYSCALL_NUM

    mov.l   @r15+, r4
    mov.l   r1, @r4

    /* Return MR0 */
    mov     r6, r0
    RESTORE_CONTEXT
    rts
    nop

    .balign 4
LABEL(SHIFT_WAIT_NOTIFY)
    .long	1 << 14
LABEL(MINUS_2)
    .long	-2

/*
 * L4_Lipc  ( same as L4_ipc, the 4th arg L4_TrheadID_t *from is NOT USED why?)
 */
EXPORT L4_Lipc
LABEL(L4_Lipc)
    SAVE_CONTEXT
    mov.l   r7, @-r15
    mov.l   r5, @-r15

    /* Only load MRs if send phase is included. */
    mov.l	nilthread, r1
    cmp/eq  r4, r1
    bt      1f

    /* Load UTCB address */
    mov.l   CONST_UTCB_BASE, r10
    mov.l   @r10, r10
    mov     #__L4_TCR_MR_OFFSET, r11
    shll2   r11
    add     r11, r10

    mov.l   @(4, r10), r1       // mr1
    mov.l   @(8, r10), r2       // mr2
    mov.l   @(12, r10), r3      // mr3
    mov.l   @(16, r10), r7      // mr4
    mov.l   @(20, r10), r9      // mr5
1:
    mov     #SYSNUM(lipc), SYSCALL_REG
    trapa   #SYSCALL_NUM

    /* Only store MRs if recv phase is included. */
    mov.l   @r15+, r10
    mov.l	nilthread, r11
    cmp/eq  r10, r11
    mov.l	@r15+, r10
    bt      2f

    /* Store the from thread ID */
    mov.l   r0, @r10

    /* Load UTCB address */
    mov.l   CONST_UTCB_BASE, r10
    mov.l   @r10, r10
    mov     #__L4_TCR_MR_OFFSET, r11
    shll2   r11
    add     r11, r10

    mov.l   r6, @(0, r10)       // tag
    mov.l   r1, @(4, r10)       // mr1
    mov.l   r2, @(8, r10)       // mr2
    mov.l   r3, @(12, r10)      // mr3
    mov.l   r7, @(16, r10)      // mr4
    mov.l   r9, @(20, r10)      // mr5

2:
    /* Return MR0 */
    mov     r6, r0
    RESTORE_CONTEXT
    rts
    nop

    .balign 4
LABEL(CONST_UTCB_BASE)
    .long   USER_UTCB_REF
    

/*
 * L4_MapControl
 */
EXPORT L4_MapControl
LABEL(L4_MapControl)
    SAVE_CONTEXT
    mov     #SYSNUM(map_control), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_SpaceControl
 */
EXPORT L4_SpaceControl
LABEL(L4_SpaceControl)
    /*
     * r4-r7 are used for passing 1st-4th arguments to a C function.  This is
     * defined by the GCC calling convention.  See $GCC_SRC/gcc/config/sh/sh.h.
     * We pass the rest of its arguments via r0-r3, leaving 1st-4th
     * arguments there.
     */
    mov.l   @r15, r0            // resources

    SAVE_CONTEXT

    mov     #SYSNUM(space_control),SYSCALL_REG
    trapa   #SYSCALL_NUM

    RESTORE_CONTEXT

    /* TODO: Assume that old_resources is returned via r1. */
    mov.l   @(4, r15), r2
    tst     r2, r2
    bt      1f
    mov.l   r1, @r2             // *old_resources = r_old_resources;
1:
    rts
    nop

/*
 * L4_CacheControl
 */
EXPORT L4_CacheControl
LABEL(L4_CacheControl)
    SAVE_CONTEXT
    mov     #SYSNUM(cache_control), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_PlatformControl
 */
EXPORT L4_PlatformControl
LABEL(L4_PlatformControl)
    SAVE_CONTEXT
    mov     #SYSNUM(platform_control), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_SpaceSwitch
 */
EXPORT L4_SpaceSwitch
LABEL(L4_SpaceSwitch)
    SAVE_CONTEXT
    mov     #SYSNUM(space_switch), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_Mutex
 */
EXPORT L4_Mutex
LABEL(L4_Mutex)
    SAVE_CONTEXT
    mov     #SYSNUM(mutex), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_MutexControl
 */
EXPORT L4_MutexControl
LABEL(L4_MutexControl)
    SAVE_CONTEXT
    mov     #SYSNUM(mutex_control), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_InterruptControl
 */
EXPORT L4_InterruptControl
LABEL(L4_InterruptControl)
    SAVE_CONTEXT
    mov     #SYSNUM(interrupt_control), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop


/*
 * L4_CapControl
 */
EXPORT L4_CapControl
LABEL(L4_CapControl)
    SAVE_CONTEXT
    mov     #SYSNUM(cap_control), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_MemoryCopy
 */
EXPORT L4_MemoryCopy
LABEL(L4_MemoryCopy)
    SAVE_CONTEXT
    mov     #SYSNUM(memory_copy), SYSCALL_REG
    trapa   #SYSCALL_NUM
    RESTORE_CONTEXT
    rts
    nop


/*
 * NILTHREAD
 */
    .balign 4
nilthread:
    .long   0xfffffffc

