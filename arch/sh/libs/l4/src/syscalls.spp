/*
 * Copyright (c) 2006, National ICT Australia
 */
/*
 * Copyright (c) 2007, Open Kernel Labs, Inc.
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Open Kernel Labs, Inc. nor the names of
 *       its contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <compat/asm.h>
#include <l4/arch/syscalls_asm.h>
#include <l4/arch/vregs.h>

#define SAVE_CONTEXT        \
    sts.l   pr, @-r15;      \
    mov.l   r8, @-r15;      \
    mov.l   r9, @-r15;      \
    mov.l   r10, @-r15;     \
    mov.l   r11, @-r15;     \
    mov.l   r12, @-r15;     \
    mov.l   r13, @-r15;     \
    mov.l   r14, @-r15

#define RESTORE_CONTEXT     \
    mov.l   @r15+, r14;     \
    mov.l   @r15+, r13;     \
    mov.l   @r15+, r12;     \
    mov.l   @r15+, r11;     \
    mov.l   @r15+, r10;     \
    mov.l   @r15+, r9;      \
    mov.l   @r15+, r8;      \
    lds.l   @r15+, pr

/*
 * L4_Word_t *__L4_SH4A_Utcb(void)
 */
EXPORT __L4_SH4A_Utcb
LABEL(__L4_SH4A_Utcb)
    sts.l   pr, @-r15
    mov.l   r8, @-r15

    mov     #L4_TRAP_GETUTCB, SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    /* result into r0 */
    mov.l   @r15+, r8
    lds.l   @r15+, pr
    rts
    nop

/*
 * L4_KernelInterface
 */
EXPORT L4_KernelInterface
LABEL(L4_KernelInterface)
    SAVE_CONTEXT

    mov     #L4_TRAP_KIP, SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    tst     r4, r4      // if (ApiVersion)
    bt      1f
    mov.l   r1, @r4     //     *ApiVersion = r_ApiVersion;
1:
    tst     r5, r5      // if (ApiFlags)
    bt      2f
    mov.l   r2, @r5     //     *ApiFlags = r_ApiFlags;
2:
    tst     r6, r6      // if (KernelId)
    bt      3f
    mov.l   r3, @r6     //     *KernelId = r_KernelId;
3:

    /* Return result in r0. */
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_ExchangeRegisters
 */
EXPORT L4_ExchangeRegisters
LABEL(L4_ExchangeRegisters)
    /*
     * r4-r7 are used for 1st-4th arguments of a C function.  This is defined
     * by the GCC calling convention.  See $GCC_SRC/gcc/config/sh/sh.h.
     * We pass the rest of its arguments via r0-r3, leaving 1st-4th
     * arguments there.
     */
    mov.l   @(0, r15), r1       // flags
    mov.l   @(4, r15), r2       // UserDefHandle
    mov.l   @(8, r15), r3       // pager

    SAVE_CONTEXT

    mov     #SYSNUM(exchange_registers), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    /* r0 holds result */

    RESTORE_CONTEXT

    mov.l   @(12, r15), r2
    mov.l   r5, @r2             // *old_control = r_control;
    mov.l   @(16, r15), r2
    mov.l   r6, @r2             // *old_sp = r_sp;
    mov.l   @(20, r15), r2 
    mov.l   r7, @r2             // *old_ip = r_ip;
    mov.l   @(24, r15), r2
    mov.l   r1, @r2             // *old_flags = r_flags;
    mov.l   @(28, r15), r2
    mov.l   r2, @r2             // *old_UserDefHandle = r_userhandle;

    rts
    nop

/*
 * L4_ThreadControl
 */
EXPORT L4_ThreadControl
LABEL(L4_ThreadControl)
    /*
     * r4-r7 are used for 1st-4th arguments of a C function.  This is defined
     * by the GCC calling convention.  See $GCC_SRC/gcc/config/sh/sh.h.
     * We pass the rest of its arguments via r1-r3, leaving 1st-4th
     * arguments there.
     */
    mov.l   @(0, r15), r1       // ExceptionHandler
    mov.l   @(8, r15), r2       // resources
    mov.l   @(12, r15), r3      // *UtcbLocation

    SAVE_CONTEXT
    mov     #SYSNUM(thread_control), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop
/*
 * L4_ThreadSwitch
 */
EXPORT L4_ThreadSwitch
LABEL(L4_ThreadSwitch)
    SAVE_CONTEXT
    mov     #SYSNUM(thread_switch), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_Schedule
 */
EXPORT L4_Schedule
LABEL(L4_Schedule)
    /*
     * r4-r7 are used for passing 1st-4th arguments to a C function.  This is
     * defined by the GCC calling convention.  See $GCC_SRC/gcc/config/sh/sh.h.
     * We pass the rest of its arguments via r1-r3, leaving 1st-4th
     * arguments there.
     */
    mov.l   @(0, r15), r1        // prio
    mov.l   @(4, r15), r2        // flags

    SAVE_CONTEXT

    mov     #SYSNUM(schedule), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    RESTORE_CONTEXT

    mov.l   @(8, r15), r2
    mov.l   r1, @r2             // *rem_timeslice = r_tslen;

    rts
    nop

/*
 * L4_Ipc
 */
EXPORT L4_Ipc
LABEL(L4_Ipc)
    SAVE_CONTEXT

    /* Load UTCB address */
    mov.l   CONST_UTCB_BASE, r10
    add     #__L4_TCR_MR_OFFSET, r10

    mov     r6, r0

    /* Only load MRs if send phase is included. */
    cmp.eq  r4, #NILTHREAD
    bt      1f
    mov.l   @(r10, 4), r1
    mov.l   @(r10, 8), r2
    mov.l   @(r10, 12), r3
    mov.l   @(r10, 16), r6
    mov.l   @(r10, 20), r9
1:

    mov     #SYSNUM(ipc), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    /* Load UTCB address */
    mov.l   CONST_UTCB_BASE, r10
    add     r10, #__L4_TCR_MR_OFFSET

    /* Only store MRs if recv phase is included. */
    cmp.eq  r5, #NILTHREAD
    bt      2f
    mov.l   r0, @(r10, 0)
    mov.l   r1, @(r10, 4)
    mov.l   r2, @(r10, 8)
    mov.l   r3, @(r10, 12)
    mov.l   r6, @(r10, 16)
    mov.l   r9, @(r10, 20)
2:

    RESTORE_CONTEXT
    rts
    nop

LABEL(CONST_UTCB_BASE)
    .long   USER_UTCB_REF
    

/*
 * L4_Notify
 */
EXPORT L4_Notify
LABEL(L4_Notify)
    SAVE_CONTEXT

    mov     r5, r1              // mr[1] = mask
    mov.l   #NILTHREAD, r5      // receiver = nil
    mov.l   #(1 << 13), r0      // tag = 1 << 13

    mov     #SYSNUM(ipc), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_WaitNotify
 */
EXPORT L4_WaitNotify
LABEL(L4_WaitNotify)
    SAVE_CONTEXT

    mov.l   r4, @-r15

    mov.l   #NILTHREAD, r4      // to_tid = nilthread
    mov.l   #-2, r5             // from_tid = wait_notify
    mov.l   #(1 << 14), r0      // tag = 1 << 14

    mov     #SYSNUM(ipc), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    mov.l   @r15+, r4
    mov.l   r1, @r4

    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_Lipc  ( same as L4_ipc, the 4th arg L4_TrheadID_t *from is NOT USED why?)
 */
EXPORT L4_Lipc
LABEL(L4_Lipc)
    SAVE_CONTEXT

    /* Load UTCB address */
    mov.l   CONST_UTCB_BASE, r10
    add     #__L4_TCR_MR_OFFSET, r10

    mov     r6, r0

    /* Only load MRs if send phase is included. */
    cmp.eq  r4, #NILTHREAD
    bt      1f
    mov.l   @(r10, 4), r1
    mov.l   @(r10, 8), r2
    mov.l   @(r10, 12), r3
    mov.l   @(r10, 16), r6
    mov.l   @(r10, 20), r9
1:

    mov     #SYSNUM(lipc), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    /* Load UTCB address */
    mov.l   CONST_UTCB_BASE, r10
    add     r10, #__L4_TCR_MR_OFFSET

    /* Only store MRs if recv phase is included. */
    cmp.eq  r5, #NILTHREAD
    bt      2f
    mov.l   r0, @(r10, 0)
    mov.l   r1, @(r10, 4)
    mov.l   r2, @(r10, 8)
    mov.l   r3, @(r10, 12)
    mov.l   r6, @(r10, 16)
    mov.l   r9, @(r10, 20)
2:

    RESTORE_CONTEXT
    rts
    nop

LABEL(CONST_UTCB_BASE)
    .long   USER_UTCB_REF
    

/*
 * L4_MapControl
 */
EXPORT L4_MapControl
LABEL(L4_MapControl)
    SAVE_CONTEXT
    mov     #SYSNUM(map_control), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_SpaceControl
 */
EXPORT L4_SpaceControl
LABEL(L4_SpaceControl)
    /*
     * r4-r7 are used for passing 1st-4th arguments to a C function.  This is
     * defined by the GCC calling convention.  See $GCC_SRC/gcc/config/sh/sh.h.
     * We pass the rest of its arguments via r0-r3, leaving 1st-4th
     * arguments there.
     */
    mov.l   @r15, r0            // resources

    SAVE_CONTEXT

    mov     #SYSNUM(space_control),SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM

    RESTORE_CONTEXT

    /* Assume that old_resources is returned via r1. */
    mov.l   @(4, r15), r2
    mov.l   r1, @r2     // *old_resources = r_old_resources;
    rts
    nop

/*
 * L4_CacheControl
 */
EXPORT L4_CacheControl
LABEL(L4_CacheControl)
    SAVE_CONTEXT
    mov     #SYSNUM(cache_control), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_PlatformControl
 */
EXPORT L4_PlatformControl
LABEL(L4_PlatformControl)
    SAVE_CONTEXT
    mov     #SYSNUM(platform_control), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_SpaceSwitch
 */
EXPORT L4_SpaceSwitch
LABEL(L4_SpaceSwitch)
    SAVE_CONTEXT
    mov     #SYSNUM(space_switch), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_Mutex
 */
EXPORT L4_Mutex
LABEL(L4_Mutex)
    SAVE_CONTEXT
    mov     #SYSNUM(mutex), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_MutexControl
 */
EXPORT L4_MutexControl
LABEL(L4_MutexControl)
    SAVE_CONTEXT
    mov     #SYSNUM(mutex_control), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_InterruptControl
 */
EXPORT L4_InterruptControl
LABEL(L4_InterruptControl)
    SAVE_CONTEXT
    mov     #SYSNUM(interrupt_control), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop


/*
 * L4_CapControl
 */
EXPORT L4_CapControl
LABEL(L4_CapControl)
    SAVE_CONTEXT
    mov     #SYSNUM(cap_control), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

/*
 * L4_MemoryCopy
 */
EXPORT L4_MemoryCopy
LABEL(L4_MemoryCopy)
    SAVE_CONTEXT
    mov     #SYSNUM(memory_copy), SYSCALL_REG
    trapa   #SYSCALL_TRAPANUM
    RESTORE_CONTEXT
    rts
    nop

