/*
 * Copyright (c) 2006, National ICT Australia
 */
/*
 * Copyright (c) 2007 Open Kernel Labs, Inc. (Copyright Holder).
 * All rights reserved.
 *
 * 1. Redistribution and use of OKL4 (Software) in source and binary
 * forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *     (a) Redistributions of source code must retain this clause 1
 *         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
 *         (Licence Terms) and the above copyright notice.
 *
 *     (b) Redistributions in binary form must reproduce the above
 *         copyright notice and the Licence Terms in the documentation and/or
 *         other materials provided with the distribution.
 *
 *     (c) Redistributions in any form must be accompanied by information on
 *         how to obtain complete source code for:
 *        (i) the Software; and
 *        (ii) all accompanying software that uses (or is intended to
 *        use) the Software whether directly or indirectly.  Such source
 *        code must:
 *        (iii) either be included in the distribution or be available
 *        for no more than the cost of distribution plus a nominal fee;
 *        and
 *        (iv) be licensed by each relevant holder of copyright under
 *        either the Licence Terms (with an appropriate copyright notice)
 *        or the terms of a licence which is approved by the Open Source
 *        Initative.  For an executable file, "complete source code"
 *        means the source code for all modules it contains and includes
 *        associated build and other files reasonably required to produce
 *        the executable.
 *
 * 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
 * LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
 * IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
 * EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
 * THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
 * PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
 * THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
 * BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
 * THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
 * PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
 * PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
 * THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
 *
 * 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <l4/arch/asm.h>
#include <l4/arch/vregs_asm.h>
#include <l4/arch/syscalls_asm.h>
#include <l4/arch/types_asm.h>

#ifdef __arm
        AREA    MutexLock, CODE
#endif

        BEGIN_PROC(okl4_libmutex_lock)
        /* r0 contains the lock address */
        stmdb   sp!, {r4, r5, lr} /* r4 and r5 are local variables,
                                    lr needed when we do the syscall */

        /* r4 -- saved lock address */
        mov     r4, r0
        /* Here we load the utcb address */
        mov     r3, #0xff000000
        /* r5 -- saved UTCB address */
        ldr     r5, [r3, #0xff0]

        /* From here r4 and r5 are safe, the thread_switch
                syscall will not trash these registers */

        /* r0 is tmp */
        /* First we set the point at which we want to
           be restarted in case of preemption */
        adr     r0, preempt_handler
        str     r0, [r5, #__L4_TCR_PREEMPT_CALLBACK_IP*4]
LABEL(preempt_handler)            /* If preempt we restart here */
        /* And then we enable the preemption callback to
           occur */
        mov     r0, #32
        strb    r0, [r5, #__L4_TCR_PREEMPT_FLAGS*4]
        /* r0 is lock holder */
        ldr     r0, [r4]
        /* r1 is me */
        ldr     r1, [r5]
        /* test if lock holder is == Nilthread */
        cmp     r0, #NILTHREAD
        beq     grab_lock
        /* or if lock holder is me */
        cmp     r0, r1
        beq     exit_path   /* We already have the lock so we jump forward to
                               the part where we turn off preemption and return */
        /* we couldn't get the lock so we fall through to here  */
        /* r0 holds lock holder, will be argument to the system call */
        /* r1 is temp */

        /* Disable preemption */
        mov     r1, #0
        strb    r1, [r5, #__L4_TCR_PREEMPT_FLAGS*4]

        mov     r1, #1
        str     r1, [r4, #4] /* Let current lock holder know there is contention
                                so that it knows to yield at the end of its timeslice */

        stmdb   sp!, {r4-r11}
        /* do the system call */
        mov     ip, sp
        mov     sp, #SYSNUM(thread_switch)
        swi     SWINUM(thread_switch)

        ldmia   sp!, {r4-r11}
        /* After syscall return to preempt_handler */
        b       preempt_handler
LABEL(grab_lock)
        /* The lock is free -- we try to grab it before being preempted */
        /* r0 is tmp */
        mov     r0, #0
        str     r0, [r4, #4] /* If we get this far, then noone of a higher priority than
                                us wants the lock, so we can unset the yield needed flag */
        /* Now we store ourself as the lock handler, this is transaction complete, although
           we still might be preempted right here, in which case we validaly have the lock
           and the preempt handler will go through sucessfully */
        str     r1, [r4]
        strb    r0, [r5, #__L4_TCR_PREEMPT_FLAGS*4]
        ldmia   sp!, {r4, r5, pc} /* RETURN POINT */
LABEL(exit_path)
        /* Exit path that occurs if we were preempted, before returning --
           same as above, however we need to zero, r0 first */
        mov     r0, #0
        strb    r0, [r5, #__L4_TCR_PREEMPT_FLAGS*4]
        ldmia   sp!, {r4, r5, pc} /* RETURN POINT */
        END_PROC(okl4_libmutex_lock)

        END
