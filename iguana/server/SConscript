#
# Copyright (c) 2007 Open Kernel Labs, Inc. (Copyright Holder).
# All rights reserved.
# 
# 1. Redistribution and use of OKL4 (Software) in source and binary
# forms, with or without modification, are permitted provided that the
# following conditions are met:
# 
#     (a) Redistributions of source code must retain this clause 1
#         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
#         (Licence Terms) and the above copyright notice.
# 
#     (b) Redistributions in binary form must reproduce the above
#         copyright notice and the Licence Terms in the documentation and/or
#         other materials provided with the distribution.
# 
#     (c) Redistributions in any form must be accompanied by information on
#         how to obtain complete source code for:
#        (i) the Software; and
#        (ii) all accompanying software that uses (or is intended to
#        use) the Software whether directly or indirectly.  Such source
#        code must:
#        (iii) either be included in the distribution or be available
#        for no more than the cost of distribution plus a nominal fee;
#        and
#        (iv) be licensed by each relevant holder of copyright under
#        either the Licence Terms (with an appropriate copyright notice)
#        or the terms of a licence which is approved by the Open Source
#        Initative.  For an executable file, "complete source code"
#        means the source code for all modules it contains and includes
#        associated build and other files reasonably required to produce
#        the executable.
# 
# 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
# LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
# IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
# EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
# THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
# BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
# PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
# THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
# 
# 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

Import("*")
import os

# Get SRC directory
src_root = Dir('#').srcnode().abspath

# Check architecture exists
arch = env.machine.arch
arch_path = os.path.join('arch', arch, args['package'])

# Use customer forked version of the arch package, if it exists
possible_arch_path = os.path.join("cust", args["cust"], "arch", arch, args["package"])
if os.path.exists(os.path.join(src_root, possible_arch_path)):
    arch_path = possible_arch_path

if not os.path.exists(os.path.join(src_root, arch_path)):
    print "architecture %s is not yet supported by iguana-server." % (arch)
arch_path = "#" + arch_path

public_headers = [('src/', 'include/'),
                  (arch_path + "/include/", "include/ig_server/arch/")]

cppdefines = []

linkerscripts = None
if env.toolchain.type == "gnu":
    potential_linker_scripts = []
    potential_linker_scripts += [File(arch_path + "/src/linker.lds").abspath]
    for potential in potential_linker_scripts:
        if os.path.exists(potential):
            linkerscripts = potential
            break

if get_bool_arg(args, "caps", True):
    cppdefines.append(("ENABLE_CAPS", 1))
if get_bool_arg(args, "pidreloc", False):
    cppdefines.append(("ARM_PID_RELOC", 1))
if get_bool_arg(args, "lowmemory", False):
    cppdefines.append(("CONFIG_LOWMEMORY", 1))
if get_bool_arg(args, "testfewthreads", False):
    cppdefines.append(("CONFIG_TEST_FEW_THREADS", 1))
if get_bool_arg(args, "testiguana", False):
    cppdefines.append(("CONFIG_TEST_IGUANA", 1))
if get_bool_arg(args, "VERBOSE", False):
    cppdefines.append(("VERBOSE", 1))
obj = env.KengeProgram("ig_server",
                       extra_source = args["idl_server_src"]['iguana.idl4'],
                       # okl4 lib is only needed for weaved environment types.
                       LIBS=["c", "l4", "l4e", "hash", "bit_fl",
                             "ll", "circular_buffer", "range_fl", "util",
                             "bootinfo", "okl4"],
                       LINKSCRIPTS = linkerscripts,
                       public_headers=public_headers,
                       CPPDEFINES = env.Extra(cppdefines))

env.set_program(obj, heap = 0x100000)

Return("obj")
