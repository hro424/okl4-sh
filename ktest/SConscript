#
# Copyright (c) 2007 Open Kernel Labs, Inc. (Copyright Holder).
# All rights reserved.
# 
# 1. Redistribution and use of OKL4 (Software) in source and binary
# forms, with or without modification, are permitted provided that the
# following conditions are met:
# 
#     (a) Redistributions of source code must retain this clause 1
#         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
#         (Licence Terms) and the above copyright notice.
# 
#     (b) Redistributions in binary form must reproduce the above
#         copyright notice and the Licence Terms in the documentation and/or
#         other materials provided with the distribution.
# 
#     (c) Redistributions in any form must be accompanied by information on
#         how to obtain complete source code for:
#        (i) the Software; and
#        (ii) all accompanying software that uses (or is intended to
#        use) the Software whether directly or indirectly.  Such source
#        code must:
#        (iii) either be included in the distribution or be available
#        for no more than the cost of distribution plus a nominal fee;
#        and
#        (iv) be licensed by each relevant holder of copyright under
#        either the Licence Terms (with an appropriate copyright notice)
#        or the terms of a licence which is approved by the Open Source
#        Initative.  For an executable file, "complete source code"
#        means the source code for all modules it contains and includes
#        associated build and other files reasonably required to produce
#        the executable.
# 
# 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
# LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
# IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
# EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
# THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
# BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
# PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
# THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
# 
# 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

Import("*")
import os
import time
import math
tt = time.gmtime()
env.Append(CPPDEFINES = [('YEAR', tt[0]),
                         ('MONTH', tt[1]),
                         ('DAY', tt[2])])

# XXX: need a -r for all user-land apps, but can't build the kernel with -r
# -r entirely breaks regular ld and elf weaver, though.
if conf.dict.get('RUN', env.machine.default_method) != "hardware":
    env.Append(CPPDEFINES=[("RUN_ON_SIMULATOR", 1)])

# Profiling config options
if get_bool_arg(args, "ENABLE_PROFILING", False):
    env.Append(CPPDEFINES = [("CONFIG_L4_PROFILING", 1)])
# Kernel Debugging Options

if get_bool_arg(args, "ENABLE_DEBUG", True):
    env.Append(CPPDEFINES = [("CONFIG_DEBUG", 1)])

libs = ["c", "l4", "l4e", "check", "mutex", "atomic_ops", "okl4", "ktest", "serial"]

if args["serial_driver"]:
    libs.append(args["serial_driver"])
    env.Append(CPPDEFINES=[("SERIAL_DRIVER", args["serial_driver"])])

if args["timer_driver"]:
    libs.append(args["timer_driver"])
    env.Append(CPPDEFINES=[("TIMER_DRIVER", args["timer_driver"])])

src_root = Dir("#").abspath
arch_path = os.path.join("arch", env.machine.arch, "ktest")
possible_arch_path = os.path.join('cust', args["cust"], "arch", env.machine.arch, "libs/ktest")
if os.path.exists(os.path.join(src_root, possible_arch_path)):
    arch_path = possible_arch_path
arch_path = "#" + arch_path

cust_path = os.path.join('cust', args['cust'], args['package'], 'cust')
if not os.path.exists(os.path.join(src_root, cust_path)):
    cust_path = os.path.join(args['package'], 'cust', args['cust'])
    if not os.path.exists(os.path.join(src_root, cust_path)):
        print "customer %s is not yet supported by ktest." % (args['cust'])
cust_path = "#" + cust_path

source = ['src/*.c', arch_path + '/src/*.c', cust_path + '/src/*.c']

obj = env.KengeProgram("ktest",
                       LIBS=libs,
                       source=source,
                      )

env.set_program(obj, heap = 0x100000)
Return("obj")
